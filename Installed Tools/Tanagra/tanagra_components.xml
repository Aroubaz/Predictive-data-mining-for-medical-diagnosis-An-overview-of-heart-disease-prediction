<?xml version="1.0" encoding="windows-1252" standalone="yes"?>
<!DOCTYPE components [
  <!ELEMENT components (component+)>

  <!ELEMENT component (name,bitmap,description)>
  <!ATTLIST component class_name ID #REQUIRED>

  <!ELEMENT name (#PCDATA)>
  <!ELEMENT bitmap (#PCDATA)>
  <!ELEMENT description (#PCDATA)>

]><components>

	<component class_name="TMLGenCompViewData">
                <name>
                View dataset
                </name>
                
                <bitmap>
                MLViewDataset.bmp
                </bitmap>
                
		<description>
                Visualization of the current dataset into a grid, values cannot be modified. 
                All or only target and/or input attributes can be showed.
                </description>
                
		<precondition>
                A dataset must be available i.e. one or more descriptors, and one or more examples.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>
                                                                
	</component>
	
	<component class_name="TMLGenCompScatterPlot">
                <name>
                Scatterplot
                </name>

                <bitmap>
                MLViewScatterPlot.bmp
                </bitmap>

		<description>
                Plot values pair of descriptors on a horizontal and vertical axis. 
                Scatterplot is very useful for the visualization of the relationship between two variables. 
                The points can be color-coded according to their membership to groups defined by a discrete attribute.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset. One or more discrete attribute is needed if we want to show the group-membership.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>
                
	</component>
	
	<component class_name="TMLGenCompScatterPlotLegend">
                <name>
                Scatterplot with label
                </name>

                <bitmap>
                MLViewScatterPlotLegend.bmp
                </bitmap>

		<description>
                Plot values pair of descriptors on a horizontal and vertical axis. 
                Scatterplot is very useful for the visualization of the relationship between two variables. 
                Each point can be labeled (identification tag) with the example ID, the X and Y values, or the values of a discrete attribute.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset. 
                At least one discrete attribute is needed if we want to show the identifcation tag from a discrete attribute.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>
                
	</component>	
	
	<component class_name="TMLGenCompExportData">
                <name>
                Export dataset
                </name>

                <bitmap>
                MLExportDataset.bmp
                </bitmap>

		<description>
                Save current dataset into textfile format. Computed attributes can be included. 
                The copy can be restricted to target or input attributes, and selected examples. 
                We must specify a valid file name.
                </description>
                
		<precondition>
                A dataset must be available i.e. one or more descriptors, and one or more examples.
                </precondition>

		<target-attributes>
                The selected attributes to be exported if we want a restriction.
                </target-attributes>
                
		<input-attributes>
                The selected attributes to be exported if we want a restriction.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>
                
	</component>
	
	<component class_name="TMLGenCompSampling">
                <name>
                Sampling
                </name>

                <bitmap>
                MLSampling.bmp
                </bitmap>

		<description>
                Select a subset of examples (active examples) by simple sampling. An absolute or relative sample size can be specified.
                </description>
                
		<precondition>
                A dataset must be available i.e. one or more descriptors, and one or more examples.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                A part of the examples becomes active examples, used for the subsequent statistical computation; the remainder becomes inactive.
                </postcondition>
                
	</component>

	<component class_name="TMLGenCompStratSampling">
                <name>
                Stratified sampling
                </name>

                <bitmap>
                MLSamplingStratified.bmp
                </bitmap>

		<description>
                Select a subset of examples (active) by stratified sampling. A discrete attribute is used for stratification. We can 
                set the absolute or relative size of the sample.
                </description>
                
		<precondition>
                One discrete attribute used for the stratitifcation must be available. 
                We must specify the parameters (especially the stratification attribute) of this component before its utilization.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                A part of the examples becomes active examples, used for the subsequent statistical computation; the remainder becomes inactive.
                </postcondition>                

	</component>

	<component class_name="TMLGenCompISRecoverExamples">
                <name>
                Recover examples
                </name>

                <bitmap>
                MLSamplingRecoverExamples.bmp
                </bitmap>

		<description>
                Reverse (set inactive to active and vice versa) or reinitialize (set all examples to active) the examples selection.
                </description>
                
		<precondition>
                If we want to reverse the selection, unselected (inactive) examples must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                A part of the examples (perhaps all the examples if we use "Recover" parameter) becomes active examples, used for the subsequent statistical computation; the remainder becomes inactive.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompISAttValue">
                <name>
                Discrete select examples
                </name>

                <bitmap>
                MLSamplingAttributeValue.bmp
                </bitmap>

		<description>
                Select a subset of examples according to the value of a discrete attribute.
                </description>
                
		<precondition>
                At least one discrete attribute must be available in the dataset. We cannot execute this component before the parameter settings.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                A part of the examples becomes active examples, used for the subsequent statistical computation; the remainder becomes inactive.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompISFirst">
                <name>
                Select first examples
                </name>

                <bitmap>
                MLSamplingFirst.bmp
                </bitmap>

		<description>
                Select the first "m" examples of the dataset. If m is higher or equal to 1, m corresponds to the absolute number of selected instances; if m is lower than 1, it is the proportion of selected instances. If m is higher than the size of the dataset, all the instances are selected.
                </description>
                
		<precondition>
                At least one available instance into the dataset. The dataset cannot be empty.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                A part of the examples becomes active examples, used for the subsequent statistical computation; the remainder becomes inactive.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompISCAttValue">
                <name>
                Continuous select examples
                </name>

                <bitmap>
                MLSamplingContinuousAttributeValue.bmp
                </bitmap>

		<description>
                Select a subset of examples with a continuous attribute-value condition.
                </description>
                
		<precondition>
                At least one continuous attribute must be available in the dataset. We cannot execute this component before the parameter settings.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                A part of the examples becomes active examples, used for the subsequent statistical computation; the remainder becomes inactive.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompISRuleBased">
                <name>
                Rule-based selection
                </name>

                <bitmap>
                MLSamplingRuleBased.bmp
                </bitmap>

		<description>
                Select a subset of examples with a rule. We cannot execute this component before the parameter settings.
                </description>
                
		<precondition>
                A dataset must be available i.e. one or more descriptors, and one or more examples.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                A part of the examples becomes active examples, used for the subsequent statistical computation; the remainder becomes inactive.
                </postcondition>
                
	</component>	
	
	<component class_name="TMLGenCompODUnivariate">
                <name>
                Univariate Outlier Detection
                </name>

                <bitmap>
                MLOutlierDetectionUnivariate.bmp
                </bitmap>

		<description>
                Univariate outlier detection on continuous input attributes.
                </description>
                
		<precondition>
                One or more continuous attributes must be available in the dataset. 
                The continuous attributes to be described must be set as INPUT.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes used for detection of unusual observations.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDUnivCont">
                <name>
                Univariate continuous stat
                </name>

                <bitmap>
                MLUnivStatCont.bmp
                </bitmap>

		<description>
                Descriptive statistics on continuous input attributes.
                </description>
                
		<precondition>
                One or more continuous attributes must be available in the dataset. 
                The continuous attributes to be described must be set as INPUT.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes to be described.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompSDUnivContPlus">
                <name>
                More Univariate cont stat
                </name>

                <bitmap>
                MLUnivStatContPlus.bmp
                </bitmap>

		<description>
                Detailed descriptive statistics on input continuous attributes.
                </description>
                
		<precondition>
                One or more continuous attributes must be available in the dataset. 
                The continuous attributes to be described must be set as INPUT.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes to be described.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompSDUnivNormalityTest">
                <name>
                Normality Test
                </name>

                <bitmap>
                MLSDNormalityTest.bmp
                </bitmap>

		<description>
                Shapiro-Wilk, Lilliefors and d'Agostino Normality Test. 
                </description>
                
		<precondition>
		One or more continuous attributes must be available in the dataset. 
                The continuous attributes to be tested must be set as INPUT. 
                This component does not work properly if the number of examples is lower than 4. 
                Shapiro-Wilk's Statistic is not computed if n is upper than 5000.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                The continuous attributes to be tested.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>
                
	</component>	

	<component class_name="TMLGenCompSDUnivDisc">
                <name>
                Univariate discrete stat
                </name>

                <bitmap>
               MLUnivStatDisc.bmp
                </bitmap>

		<description>
                Descriptive statistics on discrete input attributes.
                </description>
                
		<precondition>
		One or more discrete attributes must be available in the dataset. 
                The discrete attributes to be described must be set as INPUT. 
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                One or more discrete attributes to be described.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompSDOneAnova">
                <name>
                One-way ANOVA
                </name>

                <bitmap>
                MLOneWayAnova.bmp
                </bitmap>

		<description>
                One way analysis of variance: compare the average of continuous TARGET attributes according to groups defined by INPUT attributes. 
                If several TARGET and INPUT attributes are defined, the component computes the ANOVA of each pair of TARGET-INPUT attributes.
                </description>
                
		<precondition>
                At least one or more discrete and continuous attributes must be available together. The TARGET and INPUT attributes must be defined.
                </precondition>

		<target-attributes>
                The continuous dependent variables(s).
                </target-attributes>
                
		<input-attributes>
                The discrete factor(s).
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompSDWelchAnova">
                <name>
                Welch ANOVA
                </name>

                <bitmap>
                MLWelchOneWayAnova.bmp
                </bitmap>

		<description>
                Welch's variance-weighted One way analysis of variance: compare the average of continuous TARGET attributes according to groups defined by INPUT attributes. 
                If several TARGET and INPUT attributes are defined, the component computes the ANOVA of each pair of TARGET-INPUT attributes. 
                This method is better when the groups have unequal variances and they are unequal sample size.
                </description>
                
		<precondition>
                At least one or more discrete and continuous attributes must be available together. The TARGET and INPUT attributes must be defined.
                </precondition>

		<target-attributes>
                The continuous dependent variables(s).
                </target-attributes>
                
		<input-attributes>
                The discrete factor(s).
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompManova">
                <name>
                One-way MANOVA
                </name>

                <bitmap>
               MLSDOneWayManova.bmp
                </bitmap>

		<description>
                One way multivariate analysis of variance: compute groups differences across several 
                continuous dependent variables simultaneously. The null hypothesis is that the vectors 
                of means of the multiple dependent attributes are the same in the groups defined 
                by the value of the discrete independent variable. 
                If several INPUT attributes are defined, we obtain a MANOVA for each INPUT attribute.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                Two or more continuous dependent variables.
                </target-attributes>
                
		<input-attributes>
                One or more discrete variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompBoxM">
                <name>
                Box's M Test
                </name>

                <bitmap>
                MLSDBoxMTest.bmp
                </bitmap>

		<description>
                Box's M is a statistic which tests the homosecadsticity assumption, i.e. the null hypothesis is that the 
                covariance matrices are the same in the groups defined 
                by the value of the discrete independent variable. This component can be viewed also as a multivariate version of the Bartlett's test. 
                If several INPUT attributes are defined, we obtain a Box's M test for each INPUT attribute.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                Two or more continuous dependent variables.
                </target-attributes>
                
		<input-attributes>
                One or more discrete variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenCompT2">
                <name>
                Hotelling's T2
                </name>

                <bitmap>
                MLSDMultivariateT2.bmp
                </bitmap>

		<description>
                Multivariate comparison of two means with the homoscedasticity assumption. The null hypothesis is that the vector 
                of means of the multiple dependent attributes is the same one into the two groups defined 
                by the value of the discrete independent variable. 
                If several INPUT attributes are defined, we obtain a T2 for each INPUT attribute.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                Two or more continuous dependent variables.
                </target-attributes>
                
		<input-attributes>
                One or more binary (discrete) variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompT2Heteroscedastic">
                <name>
                Hotelling's T2 Heteroscedastic
                </name>

                <bitmap>
                MLSDMultivariateT2Heteroscedastic.bmp
                </bitmap>

		<description>
                Multivariate comparison of two means with the heteroscedasticity assumption. The null hypothesis is that the vector 
                of means of the multiple dependent attributes is the same one into the two groups defined 
                by the value of the discrete independent variable. 
                If several INPUT attributes are defined, we obtain a T2 for each INPUT attribute.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                Two or more continuous dependent variables.
                </target-attributes>
                
		<input-attributes>
                One or more binary (discrete) variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenCompSDTTestEqVariance">
                <name>
                T-Test
                </name>

                <bitmap>
               MLSDTTest.bmp
                </bitmap>

		<description>
                Two-Sample t-Test for Equal Means -- Assuming equal variance. Compare the mean of a dependent variables of individuals belonging to different groups.
                If several TARGET and INPUT attributes are defined, the component computes the t-Test of each pair of TARGET-INPUT attributes.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more continuous dependent variables.
                </target-attributes>
                
		<input-attributes>
                One or more discrete BINARY variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDTTestUnequalVariance">
                <name>
                T-Test Unequal Variance
                </name>

                <bitmap>
                MLSDTTestUnequalVariance.bmp
                </bitmap>

		<description>
                Two-Sample t-Test for Equal Means -- Assuming unequal variance. Compare the mean of a dependent variables of individuals belonging to different groups.
                If several TARGET and INPUT attributes are defined, the component computes the t-Test of each pair of TARGET-INPUT attributes. 
                In comparison with the "equal variance" assumption, the degree of freedom is computed differently here.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more continuous dependent variables.
                </target-attributes>
                
		<input-attributes>
                One or more discrete BINARY variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDPairedTTest">
                <name>
                Paired T-Test
                </name>

                <bitmap>
               MLSDPairedTTest.bmp
                </bitmap>

		<description>
                Student's t-Test for paired samples. The paired attributes to compare must be set as TARGET and INPUT. If several attributes are TARGET (or INPUT), a test is computed on each pair of TARGET-INPUT.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDPairedVTest">
                <name>
                Paired V-Test
                </name>

                <bitmap>
               MLSDPairedVTest.bmp
                </bitmap>

		<description>
                Comparison of variances for paired samples. The paired attributes to compare must be set as TARGET and INPUT. If several attributes are TARGET (or INPUT), a test is computed on each pair of TARGET-INPUT.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDVarTestFisher">
                <name>
                Fisher's test
                </name>

                <bitmap>
               MLSDVarianceTestFisher.bmp
                </bitmap>

		<description>
                Fisher's test for homogeneity of variances -- 2 normally distributed samples. 
                Compare the variance of a dependent variables of individuals belonging to two groups. 
                If several TARGET and INPUT attributes are defined, the component computes the test of each pair of TARGET-INPUT attributes.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more continuous dependent variables.
                </target-attributes>
                
		<input-attributes>
                One or more discrete BINARY variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompSDVarTestBartlett">
                <name>
                Bartlett's test
                </name>

                <bitmap>
               MLSDVarianceTestBartlett.bmp
                </bitmap>

		<description>
                Bartlett's test for homogeneity of variances -- K normally distributed samples.
                Compare the variance of a dependent variables of individuals belonging to different groups. 
                If several TARGET and INPUT attributes are defined, the component computes the test of each pair of TARGET-INPUT attributes.                
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more continuous dependent variables.
                </target-attributes>
                
		<input-attributes>
                One or more discrete variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDVarTestLevene">
                <name>
                Levene's test
                </name>

                <bitmap>
               MLSDVarianceTestLevene.bmp
                </bitmap>

		<description>
                Levene's test for homogeneity of variances -- K independent samples.
                Compare the variance of a dependent variables of individuals belonging to different groups. 
                If several TARGET and INPUT attributes are defined, the component computes the test of each pair of TARGET-INPUT attributes.                
                The Levene test is less sensitive than the Bartlett test to departures from normality.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more continuous dependent variables.
                </target-attributes>
                
		<input-attributes>
                One or more discrete variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDVarTestBrownForsythe">
                <name>
                Brown - Forsythe's test
                </name>

                <bitmap>
               MLSDVarianceTestBrownForsythe.bmp
                </bitmap>

		<description>
                Brown - Forsythe's test for homogeneity of variances -- K independent samples.
                Compare the variance of a dependent variables of individuals belonging to different groups. 
                If several TARGET and INPUT attributes are defined, the component computes the test of each pair of TARGET-INPUT attributes.                
                This is an extension of the Levene's test.                
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more continuous dependent variables.
                </target-attributes>
                
		<input-attributes>
                One or more discrete variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenCompSDCrossTab">
                <name>
                Contingency Chi-Square
                </name>

                <bitmap>
                MLSDCrossTab.bmp
                </bitmap>

		<description>
                Compute cross-tab (contingency table) from discrete attributes : target-input or cross-input selection. Some statistical indicators such as Tschuprow or Cramer are computed. 
                If the standard parameter is used, the component computes the CHI-2 for each pair of TARGET-INPUT attributes. 
                If the CROSS-INPUT parameter is checked, the component computes the table for each pair of INPUT attributes.
                </description>
                
		<precondition>
                The TARGET and/or INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                None or several discrete variables, according to the parameters of the component.
                </target-attributes>
                
		<input-attributes>
                One or more discrete variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>

	<component class_name="TMLGenCompSDCorrelation">
                <name>
                Linear correlation
                </name>

                <bitmap>
                MLSDLinearCorrelation.bmp
                </bitmap>

		<description>
                Compute and test the significance of the linear correlation from pairs of continuous attributes : target-input or cross-input selection. If the standard parameter is used, the component computes the correlation for each pair of TARGET-INPUT attributes. If the CROSS-INPUT parameter is checked, the component computes the correlation for each pair of INPUT attributes.
                </description>
                
		<precondition>
                The TARGET and/or INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                None or several continuous variables, according to the parameters of the component.
                </target-attributes>
                
		<input-attributes>
                One or more continuous variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompSDSemiPartialCorrelation">
                <name>
                Semi-partial Correlation
                </name>

                <bitmap>
                MLSDSemiPartialCorrelation.bmp
                </bitmap>

		<description>
                Compute and test the significance of the SEMI-PARTIAL correlation from pairs of target-input continuous attributes controlling the values of illustrative variables. 
                We can use product moment correlation (Pearson) or Spearman correlation.
                </description>
                
		<precondition>
                The TARGET and INPUT and ILLUSTRATIVE attributes must be specified.
                </precondition>

		<target-attributes>
                One or more continuous variables.
                </target-attributes>
                
		<input-attributes>
                One or more continuous variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDPartialCorrelation">
                <name>
                Partial Correlation
                </name>

                <bitmap>
                MLSDPartialCorrelation.bmp
                </bitmap>

		<description>
                Compute and test the significance of the PARTIAL correlation from pairs of target-input continuous attributes controlling the values of illustrative variables. 
                We can use product moment correlation (Pearson) or Spearman correlation.
                </description>
                
		<precondition>
                The TARGET and INPUT and ILLUSTRATIVE attributes must be specified.
                </precondition>

		<target-attributes>
                One or more continuous variables.
                </target-attributes>
                
		<input-attributes>
                One or more continuous variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDCatCorr">
                <name>
                Categorical r
                </name>

                <bitmap>
                MLSDCategoricalCorrelation.bmp
                </bitmap>

		<description>
                Correlation coefficient for categorical attributes. Compute and test the significance of the correlation from pairs of categorical attributes : target-input or cross-input selection. If the standard parameter is used, the component computes the correlation for each pair of TARGET-INPUT attributes. If the CROSS-INPUT parameter is checked, the component computes the correlation for each pair of INPUT attributes.
                The computation is based on the transformation of the categorical variable in a dummy variable using the pairwise comparison principle i.e. the value is 1 if 2 examples have the same value, 0 otherwise. The correlation coefficient is computed on these dummy variables. Fortunately,  theoretical results enable to compute the coefficient in a linear time (Lallich and Rakotomalala, 1999 - 2002)
                </description>
                
		<precondition>
                The TARGET and/or INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                None or several categorical variables, according to the parameters of the component.
                </target-attributes>
                
		<input-attributes>
                One or more categorical variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDCatTau">
                <name>
                Goodman-Kruskal Tau
                </name>

                <bitmap>
                MLSDCategoricalAssociation.bmp
                </bitmap>

		<description>
                Goodman and Kruskal's Tau (1954). Asymmetric Measure of Association between categorical (nominal) variables, obtained by using the principle of proportionnal reduction in error. 
                Chi-square statistic is computed according to Light and Margolin's work (1971).
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more categorical variables.
                </target-attributes>
                
		<input-attributes>
                One or more categorical variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDCatLambda">
                <name>
                Goodman-Kruskal Lambda
                </name>

                <bitmap>
                MLSDCategoricalAssocLambda.bmp
                </bitmap>

		<description>
                Goodman and Kruskal's Lambda (1954). Asymmetric Measure of Association between categorical (nominal) variables, obtained by using the principle of proportionnal reduction in error. 
                Asymptotic variance enables to compute confidence interval.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more categorical variables.
                </target-attributes>
                
		<input-attributes>
                One or more categorical variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenCompSDCatTheilU">
                <name>
                Theil U
                </name>

                <bitmap>
                MLSDCategoricalAssocTheil.bmp
                </bitmap>

		<description>
                Theil's U (1972). Asymmetric Uncertainty Coefficient, Measure of Association between categorical (nominal) variables, obtained by using the principle of proportionnal reduction of error. 
                Chi-square statistic and asymptotic variance are computed.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more categorical variables.
                </target-attributes>
                
		<input-attributes>
                One or more categorical variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDOrdinalAssocGamma">
                <name>
                Goodman Kruskal Gamma
                </name>

                <bitmap>
                MLSDOrdinalAssocGamma.bmp
                </bitmap>

		<description>
		Goodman and Kruskal's Gamma. Symmetric measure for association between ordinal variables. It varies from -1 to +1. If the variables are independants, Gamma = 0. 
                Asymptotic standard error is computed. The significance test is based on the standard error computed under H0 (independance) assumption.                
                </description>
                
		<precondition>
                The INPUT attributes must be specified. The TARGET may be specified according to the parameter of the component.
                </precondition>

		<target-attributes>
                According to the paramater, one or more continuous variables.
                </target-attributes>
                
		<input-attributes>
                One or more continuous variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenCompSDOrdinalAssocTau_b">
                <name>
                Kendall Tau-b
                </name>

                <bitmap>
                MLSDOrdinalAssocTau_b.bmp
                </bitmap>

		<description>
		Kendall's Tau-b. Symmetric measure for association between ordinal variables. It varies from -1 to +1. If the variables are independants, Tau-b = 0. 
                Asymptotic standard error is computed. The significance test is based on the standard error computed under H0 (independance) assumption.                
                </description>
                
		<precondition>
                The INPUT attributes must be specified. The TARGET may be specified according to the parameter of the component.
                </precondition>

		<target-attributes>
                According to the paramater, one or more continuous variables.
                </target-attributes>
                
		<input-attributes>
                One or more continuous variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>			
	
	<component class_name="TMLGenCompSDOrdinalAssocTau_c">
                <name>
                Kendall Tau-c
                </name>

                <bitmap>
                MLSDOrdinalAssocTau_c.bmp
                </bitmap>

		<description>
		Kendall's Tau-c. Symmetric measure for association between ordinal variables. It varies from -1 to +1. If the variables are independants, Tau-c = 0. 
                Asymptotic standard error is computed. The significance test is based on the standard error computed under H0 (independance) assumption.                
                </description>
                
		<precondition>
                The INPUT attributes must be specified. The TARGET may be specified according to the parameter of the component.
                </precondition>

		<target-attributes>
                According to the paramater, one or more continuous variables.
                </target-attributes>
                
		<input-attributes>
                One or more continuous variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>				
	
	<component class_name="TMLGenCompSDOrdinalAssocSommers">
                <name>
                Sommers d
                </name>

                <bitmap>
                MLSDOrdinalAssocSommers.bmp
                </bitmap>

		<description>
		Sommers' d. Asymmetric measure for association between ordinal variables. It varies from -1 to +1. If the variables are independants, Sommers' d = 0. 
                Asymptotic standard error is computed. The significance test is based on the standard error computed under H0 (independance) assumption.                
                </description>
                
		<precondition>
                The INPUT attributes must be specified. The TARGET also.
                </precondition>

		<target-attributes>
                One or more continuous variables.
                </target-attributes>
                
		<input-attributes>
                One or more continuous variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>					
	
	<component class_name="TMLGenCompSDCatPartialTheilU">
                <name>
                Partial Theil U
                </name>

                <bitmap>
                MLSDCategoricalAssocTheilPartial.bmp
                </bitmap>

		<description>
                Partial Asymmetric Uncertainty Coefficient, Measure of Association between categorical (nominal) variables while controlling for a third variable, obtained by using the principle of proportionnal reduction of error.                
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more categorical variables.
                </target-attributes>
                
		<input-attributes>
                One or more categorical variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>		
			
	<component class_name="TMLGenCompSDGroupCarac">
                <name>
                Group characterization
                </name>

                <bitmap>
                MLSDGroupCaracterization.bmp
                </bitmap>

		<description>
                Comparative descriptive statistics in order to characterize groups defined by discrete attributes. The aim of this component is to show if there are differences between groups according to the various statistical indicators such as average, proportion, etc. The groups are defined by the discrete TARGET attributes. The descriptives statistics are computed on discrete or continuous INPUT variables.
                This component can be used for instance in order to depict groups computed by a clustering algorithm.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                One or more (if you want characterize several groups) discrete attributes.
                </target-attributes>
                
		<input-attributes>
                One or more continuous and/or discrete attributes.
                </input-attributes>
                
		<postcondition>
                none.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompGroupExploration">
                <name>
                Group exploration
                </name>

                <bitmap>
                MLSDGroupExploration.bmp
                </bitmap>

		<description>
                Visual group exploration, it is a generalization of the Group Characterization. The aim is to compute descriptive statistics on a subgroups of the dataset, the subgroups are defined by attribute-value conditions using discrete attributes. 
                This component works only in an interactive way (View Menu), we have to manually define the subgroups.
                </description>
                
		<precondition>
                The TARGET and INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                Discrete characterization attribute(s). Used for groups definition.
                </target-attributes>
                
		<input-attributes>
                Description attributes, discrete and/or continuous. Used for the description of subgroups.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	

	<component class_name="TGenFCFormula">
                <name>
                Formula
                </name>

                <bitmap>
                MLFCContinuousFormula.bmp
                </bitmap>

		<description>
                Compute new attribute from algebraic expression. The parameter menu enables you to define the mathematical expression. The Execute and View menu computes the new expression. The possible errors are reported (the expression is not valid or some values cannot be computed e.g. a square root on a negative value). 
                Use a "View Dataset" component in order to visualize the new column in the dataset. The expression can be computed on continuous attributes only.
                </description>
                
		<precondition>
                One or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                A new column (continuous attribute) is added in the dataset, it can be used in the subsequent components.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompFCResidScores">
                <name>
                Residual Scores
                </name>

                <bitmap>
                MLFCResidualScores.bmp
                </bitmap>

		<description>
                Compute the regression residual scores of each target attribute on input attributes. The new attributes can be used in the subsequent analyses such as the computation of partial correlation, etc.
                </description>
                
		<precondition>
                One or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                New columns (continuous attributes) are added in the dataset, corresponding to the target attributes.
                </postcondition>                

	</component>	
	
	<component class_name="TGenFCTrend">
                <name>
                Trend
                </name>

                <bitmap>
                MLFCTrend.bmp
                </bitmap>

		<description>
                Generate a trend (1, 2, 3, ..., n) in a new column (continous attribute).
                </description>
                
		<precondition>
                A dataset must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                The new column (continuous attribute) is available for the subsequent components.
                </postcondition>                

	</component>
	
	<component class_name="TGenFCDiscEqWidth">
                <name>
                EqWidth Disc
                </name>

                <bitmap>
                MLFCDiscEqWidth.bmp
                </bitmap>

		<description>
                Equal-interval binning discretization. The main parameter is the number of intervals. The approach transforms the continuous attribute into a ordered discrete one where the width of each interval is the same.
                </description>
                
		<precondition>
                One or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                The continuous attributes to be discretized.
                </input-attributes>
                
		<postcondition>
                A discrete attribute is added in the dataset for each input continuous attribute. These new discrete attributes are available in the subsequent components, e.g. for supervised learning algorithms, etc.
                </postcondition>                

	</component>	
	
	<component class_name="TGenFCDiscEqFreq">
                <name>
                EqFreq Disc
                </name>

                <bitmap>
                MLFCDiscEqFreq.bmp
                </bitmap>

		<description>
                Equal-frequency binning discretization. The main parameter is the number of intervals. The approach transforms the continuous attribute into a ordered discrete one where the number of examples in each interval is the same.
                </description>
                
		<precondition>
                One or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                The continuous attributes to be discretized.
                </input-attributes>
                
		<postcondition>
                A discrete attribute is added in the dataset for each input continuous attribute. The new discrete attributes are available in the subsequent components, e.g. for supervised learning algorithms, etc.
                </postcondition>                

	</component>
	
	<component class_name="TGenFCDiscMDLPC">
                <name>
                MDLPC
                </name>

                <bitmap>
                MLFCDiscMDLPC.bmp
                </bitmap>

		<description>
                Fayyad and Irani's (1993) state-of-the-art supervised discretization. The approach transforms a continuous attribute into a ordered discrete one. It is a supervised algorithm, the cut points are defined with respect to a class (target) attribute. There is no parameter.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                The discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                The continuous attributes to be discretized.
                </input-attributes>
                
		<postcondition>
                A discrete attribute is added in the dataset for each input continuous attribute. The new discrete attributes are available in the subsequent components, e.g. for supervised learning algorithms, etc.
                </postcondition>                

	</component>
	
	<component class_name="TGenFCDiscBinning">
                <name>
                Binary binning
                </name>

                <bitmap>
                MLFCDiscBinning.bmp
                </bitmap>

		<description>
                Binary binning discretization. Transform the continuous attributes into binary attributes. The cut point can be automatically computed (average) or provided by the users.
                </description>
                
		<precondition>
                One or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                The continuous attributes to be discretized.
                </input-attributes>
                
		<postcondition>
                A discrete attribute is added in the dataset for each input continuous attribute. The new discrete attributes are available in the subsequent components, e.g. for supervised learning algorithms, etc.
                </postcondition>                

	</component>		
	
	<component class_name="TGenFCC2D">
                <name>
                Cont to disc
                </name>

                <bitmap>
                MLFCContinuous_2_Discrete.bmp
                </bitmap>

		<description>
                Continuous to discrete transformation. A new discrete attribute is built starting from a continuous attribute by enumeration of its values.
                </description>
                
		<precondition>
                One or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                The continuous attributes to be transformed.
                </input-attributes>
                
		<postcondition>
                A discrete attribute is added in the dataset for each input continuous attribute. The new discrete attributes are available in the subsequent components, e.g. for supervised learning algorithms, etc.
                </postcondition>                

	</component>	
	
	<component class_name="TGenFCDtoC">
                <name>
                Disc to cont
                </name>

                <bitmap>
                MLFCDiscrete_2_Continuous.bmp
                </bitmap>

		<description>
                Discrete to continuous transformation. A new continuous attribute is built from the internal code for the values of the discrete attribute.
                </description>
                
		<precondition>
                One or more discrete attributes must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                The discrete attributes to be transformed.
                </input-attributes>
                
		<postcondition>
                A continuous attribute is added in the dataset for each input discrete attribute. The new continuous attributes are available in the subsequent components, e.g. for supervised learning algorithms, etc.
                </postcondition>                

	</component>	
	
	<component class_name="TGenFCStandardize">
                <name>
                Standardize
                </name>

                <bitmap>
                MLFCStandardize.bmp
                </bitmap>

		<description>
                Standardize continuous attributes. Normalize or standardize continuous attributes using usual mathematical exepression, e.g. new_value = (value - mean) / standard deviation, etc.
                </description>
                
		<precondition>
                One or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                The continuous attributes to be transformed.
                </input-attributes>
                
		<postcondition>
                A new continuous attribute is added in the dataset for each input continuous attribute. These attributes are available in the subsequent components, e.g. for supervised learning algorithms, etc.
                </postcondition>                

	</component>
	
	<component class_name="TGenFCBinarizationContinuous">
                <name>
                0_1_Binarize
                </name>

                <bitmap>
                MLFCBinarizationContinuous.bmp
                </bitmap>

		<description>
                Transform discrete attribute to several 0/1 continuous binary attribute. A new continuous attribute is built for each value of the discrete attribute. The last value of the discrete attribute is or not treated according to the parameter setting.
                </description>
                
		<precondition>
                One or more discrete attributes must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                The discrete attributes to be treated.
                </input-attributes>
                
		<postcondition>
                A continuous attribute is added in the dataset starting from each value of a discrete attribute. These attributes are available in the subsequent components, e.g. for supervised learning algorithms, etc.
                </postcondition>                

	</component>
	
	<component class_name="TGenFCRbf">
                <name>
                RBF
                </name>

                <bitmap>
                MLFCRadialBasisFunction.bmp
                </bitmap>

		<description>
                RBF data transformation (target : cluster ; input : descriptors). It is an experimental component. Do not use.
                </description>
                
		<precondition>
                None.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	

	<component class_name="TGenRegMultiple">
                <name>
                Multiple linear regression
                </name>

                <bitmap>
                MLRegMultiple.bmp
                </bitmap>

		<description>
                Predict values of a target attribute from input ones, all are continuous. It performs a multiple linear regression according to the OLS (Ordinary Least Square) principle.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                One continuous endogenous variable.
                </target-attributes>
                
		<input-attributes>
                One or more continuous exogenous variables.
                </input-attributes>
                
		<postcondition>
                The predictions and the residuals columns (two new continuous attributes) are added in the dataset.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompSimReg">
                <name>
                Simultaneous Regression
                </name>

                <bitmap>
                MLRegSimultaneous.bmp
                </bitmap>

		<description>
                It performs all multiple regressions over all the input variables. Each attribute is predicted by the remaining variables. It is called simultaneaous regression because all the equations are computed simultaneously. The calculations are based on the inversion of the correlation matrix, which must be nonsingular.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TGenRegEpsilonSVR">
                <name>
                Espilon SVR
                </name>

                <bitmap>
                MLRegEpsilonSvr.bmp
                </bitmap>

		<description>
                Predict values of a target attribute from input ones, all are continuous. It performs a support vector regression. This component uses the LIBSVM library.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                One continuous endogenous variable.
                </target-attributes>
                
		<input-attributes>
                One or more continuous exogenous variables.
                </input-attributes>
                
		<postcondition>
                The predictions and the residuals columns (two new continuous attributes) are added in the dataset.
                </postcondition>                

	</component>	
	
	<component class_name="TGenRegNuSVR">
                <name>
                Nu SVR
                </name>

                <bitmap>
                MLRegNuSvr.bmp
                </bitmap>

		<description>
                Predict values of a target attribute from input ones, all are continuous. It performs a support vector regression. This component uses the LIBSVM library.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                One continuous endogenous variable.
                </target-attributes>
                
		<input-attributes>
                One or more continuous exogenous variables.
                </input-attributes>
                
		<postcondition>
                The predictions and the residuals columns (two new continuous attributes) are added in the dataset.
                </postcondition>                

	</component>	
		
	<component class_name="TMLGenRegOutlier">
                <name>
                Outlier Detection
                </name>

                <bitmap>
                MLRegOutlierDetection.bmp
                </bitmap>

		<description>
                Detect outliers and/or influential points for multiple linear regression (Leverage, RStandard, RStudent, DFFITS, Cook's D, Cov.Ratio).
                Number of detected points are summarized in a table. Detailed results are available. We can copy the values in a spreadsheet.
                </description>
                
		<precondition>
                Can be connected only on a linear multiple regression (with or without variable selection)
                </precondition>

		<target-attributes>
                None
                </target-attributes>
                
		<input-attributes>
                None
                </input-attributes>
                
		<postcondition>
                None
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenRegDfBetas">
                <name>
                DfBetas
                </name>

                <bitmap>
                MLRegOutlierDfBetas.bmp
                </bitmap>

		<description>
                The dfbetas measure the influence of each observation on each of the individuals regression coefficients. Specifically the dfbetas are the number of standard errors by which the coefficient changes when that observation is removed to the regression.
                Number of detected points are summarized in a table. Detailed results are available. We can copy the values in a spreadsheet.
                </description>
                
		<precondition>
                Can be connected only on a linear multiple regression (with or without variable selection)
                </precondition>

		<target-attributes>
                None
                </target-attributes>
                
		<input-attributes>
                None
                </input-attributes>
                
		<postcondition>
                None
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenRegForward">
                <name>
                Forward Entry Regression
                </name>

                <bitmap>
                MLRegForward.bmp
                </bitmap>

		<description>
                Predict values of a TARGET (endogenous) attribute from INPUT ones (exogenous), all variables are continuous.
                It performs a multiple linear regression and automatically find the "best" subset of the exogenous attributes using a forward selection strategy. 
                The steps of the selection process are depicted. The results of the best regression are provided.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                One continuous endogenous variable.
                </target-attributes>
                
		<input-attributes>
                One or more continuous exogenous variables.
                </input-attributes>
                
		<postcondition>
                The predictions and the residuals columns (two new continuous attributes) are added in the dataset.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenRegBackward">
                <name>
                Backward Elimination Reg
                </name>

                <bitmap>
                MLRegBackward.bmp
                </bitmap>

		<description>
                Predict values of a TARGET (endogenous) attribute from INPUT ones (exogenous), all variables are continuous.
                It performs a multiple linear regression and automatically find the "best" subset of the exogenous attributes using the backward elimination strategy. 
                The steps of the selection process are depicted. The results of the best regression are provided.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                One continuous endogenous variable.
                </target-attributes>
                
		<input-attributes>
                One or more continuous exogenous variables.
                </input-attributes>
                
		<postcondition>
                The predictions and the residuals columns (two new continuous attributes) are added in the dataset.
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenRegTree">
                <name>
                Regression tree
                </name>

                <bitmap>
                MLRegTree.bmp
                </bitmap>

		<description>
                Predict values of a continuous target attribute with a regression tree, input(s) can be continuous or discrete. 
                The used algorithm is the univariate version of the Clustering Tree (CTP -- See "Clustering" tab). The learning method includes a post pruning process. 
                Detailed results about the pruning sequence can be depicted. The best tree on the pruning set and the selected tree are underlined.
                </description>
                
		<precondition>
                One continuous target attribute is needed. The input attributes can be continuous or discrete.
                </precondition>

		<target-attributes>
                The continuous class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more continuous and/or discrete input attributes.
                </input-attributes>
                
		<postcondition>
                The predictions and the residuals columns (two new continuous attributes) are added in the dataset.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenRegTreeCART">
                <name>
                C-RT Regression tree
                </name>

                <bitmap>
                MLRegTreeCART.bmp
                </bitmap>

		<description>
                Predictive regression tree. Predict values of a continuous target attribute with a regression tree, input(s) can be continuous or discrete. 
                The used algorithm is the Breiman's and al. regression tree approach (1984), as outlined in the chapter 8 of their book. 
                Detailed results about the pruning sequence can be described. The best tree on the pruning set and the selected tree are highlighted.
                </description>
                
		<precondition>
                One continuous target attribute is needed. The input attributes can be continuous or discrete.
                </precondition>

		<target-attributes>
                The continuous class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more continuous and/or discrete input attributes.
                </input-attributes>
                
		<postcondition>
                The predictions and the residuals columns (two new continuous attributes) are added in the dataset.
                </postcondition>                

	</component>
		
	<component class_name="TMLGenRegAssessment">
                <name>
                Regression Assessment
                </name>

                <bitmap>
                MLRegAssessment.bmp
                </bitmap>

		<description>
                Compare observed values [TARGET attribute] with predicted values [INPUT attribute(s)] from regression analysis. This component allows to 
                highlight the best model from various models.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                One continuous endogenous variable.
                </target-attributes>
                
		<input-attributes>
                One or more continuous predicted variables from regression analysis.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompSDKWallis">
                <name>
                Kruskal-Wallis 1-way ANOVA
                </name>

                <bitmap>
                MLKruskalWallis.bmp
                </bitmap>

		<description>
		It is a non-parametric alternative to the one-way ANOVA. The aim is to compare subgroups defined by a discrete attribute (input -- discrete) on a measurement (target -- continuous). 
		If several TARGET and INPUT attributes are defined, the component computes the test for each TARGET-INPUT pair.
                </description>
                
		<precondition>
                At least one discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, i.e. discrete attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompSDVDW">
                <name>
                Van der Waerden 1-way ANOVA
                </name>

                <bitmap>
                MLNonParamLocation.bmp
                </bitmap>

		<description>
		This component performs a test for location differences using a non parametric one-way analysis of variance framework. It used the Van der Waerden scores. 
		It is a non-parametric alternative to the One-Way ANOVA. The aim is to compare subgroups defined by a discrete attribute (input -- discrete) on a measurement (target -- continuous). 
		When the data are classified into two samples (binary input), tests are based on simple linear rank statistics. When the data are classified into more than two samples (input with more than two values), tests are based on one-way anova statistics.
		If several TARGET and INPUT attributes are defined, the component computes the test for each TARGET-INPUT pair.
                </description>
                
		<precondition>
                At least one discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, i.e. discrete attributes (binary or not).
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDFYTH">
                <name>
                FYTH 1-way ANOVA
                </name>

                <bitmap>
                MLNonParamLocation.bmp
                </bitmap>

		<description>
		This component performs a test for location differences using a non parametric one-way analysis of variance framework. It used the Fisher-Yates-Terry-Hoeffding scores. 
		It is a non-parametric alternative to the One-Way ANOVA. The aim is to compare subgroups defined by a discrete attribute (input -- discrete) on a measurement (target -- continuous). 
		When the data are classified into two samples (binary input), tests are based on simple linear rank statistics. When the data are classified into more than two samples (input with more than two values), tests are based on one-way anova statistics.
		If several TARGET and INPUT attributes are defined, the component computes the test for each TARGET-INPUT pair.
                </description>
                
		<precondition>
                At least one discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, i.e. discrete attributes (binary or not).
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenCompSDMedian">
                <name>
                Median test
                </name>

                <bitmap>
                MLNonParamLocation.bmp
                </bitmap>

		<description>
		This component performs a test for location differences using a non parametric one-way analysis of variance framework. It used the median scores. 
		It is a non-parametric alternative to the One-Way ANOVA. The aim is to compare subgroups defined by a discrete attribute (input -- discrete) on a measurement (target -- continuous). 
		When the data are classified into two samples (binary input), tests are based on simple linear rank statistics. When the data are classified into more than two samples (input with more than two values), tests are based on one-way anova statistics.
		If several TARGET and INPUT attributes are defined, the component computes the test for each TARGET-INPUT pair.
                </description>
                
		<precondition>
                At least one discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, i.e. discrete attributes (binary or not).
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenCompSDMoodScale">
                <name>
                Mood Scale Test
                </name>

                <bitmap>
                MLNonParamScale.bmp
                </bitmap>

		<description>
		This component performs a test for scale differences using a non parametric framework. It used the Mood scores. 
		It is a non-parametric alternative to the Fisher or Bartlett's test. The aim is to compare subgroups defined by a discrete attribute (input -- discrete) on a measurement (target -- continuous). 
		When the data are classified into two samples (binary input), tests are based on simple linear rank statistics. When the data are classified into more than two samples (input with more than two values), tests are based on one-way anova statistics.
		If several TARGET and INPUT attributes are defined, the component computes the test for each TARGET-INPUT pair.
                </description>
                
		<precondition>
                At least one discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, i.e. discrete attributes (binary or not).
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDKlotzScale">
                <name>
                Klotz Scale Test
                </name>

                <bitmap>
                MLNonParamScale.bmp
                </bitmap>

		<description>
		This component performs a test for scale differences using a non parametric framework. It used the Klotz scores. 
		It is a non-parametric alternative to the Fisher or Bartlett's test. The aim is to compare subgroups defined by a discrete attribute (input -- discrete) on a measurement (target -- continuous). 
		When the data are classified into two samples (binary input), tests are based on simple linear rank statistics. When the data are classified into more than two samples (input with more than two values), tests are based on one-way anova statistics.
		If several TARGET and INPUT attributes are defined, the component computes the test for each TARGET-INPUT pair.
                </description>
                
		<precondition>
                At least one discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, i.e. discrete attributes (binary or not).
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDABScale">
                <name>
                Ansari-Bradley Scale Test
                </name>

                <bitmap>
                MLNonParamScale.bmp
                </bitmap>

		<description>
		This component performs a test for scale differences using a non parametric framework. It used the Ansari-Bradley scores. 
		It is a non-parametric alternative to the Fisher or Bartlett's test. The aim is to compare subgroups defined by a discrete attribute (input -- discrete) on a measurement (target -- continuous). 
		When the data are classified into two samples (binary input), tests are based on simple linear rank statistics. When the data are classified into more than two samples (input with more than two values), tests are based on one-way anova statistics.
		If several TARGET and INPUT attributes are defined, the component computes the test for each TARGET-INPUT pair.
                </description>
                
		<precondition>
                At least one discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, i.e. discrete attributes (binary or not).
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenCompSDMWhitney">
                <name>
                Mann-Whitney Comparison
                </name>

                <bitmap>
                MLMannWhitney.bmp
                </bitmap>

		<description>
		It is a non-parametric alternative to the t-Test on independent samples. The aim is to compare two subgroups defined by a binary discrete attribute (input -- discrete) on a measurement (target -- continuous). 
                </description>
                
		<precondition>
                At least one binary discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, all must be binary discrete attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                
                
	</component>	
	
	<component class_name="TMLGenCompSDKS2SampleTest">
                <name>
                K-S 2-sample test
                </name>

                <bitmap>
                MLSDKS2SampleTest.bmp
                </bitmap>

		<description>
		The Kolmogorov-Smirnov two-sample test is a test of the null hypothesis that two independent samples have been drawn from the same population (or from populations with the same distribution). The aim is to compare the empirical distribution functions (EDF) of two subgroups defined by a binary discrete attribute (input -- discrete) on a measurement (target -- continuous). 
                </description>
                
		<precondition>
                At least one binary discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, all must be binary discrete attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                
                
	</component>	
	
	<component class_name="TMLGenCompSDMoodRunsTest">
                <name>
                Mood Runs Test
                </name>

                <bitmap>
                MLSDRunsTest.bmp
                </bitmap>

		<description>
                Mood Runs Test -- A "k independent samples" generalization of Wald-Wolfowitz Runs Test -- No correction for ties. 
                It may be used as an alternative to Kruskal-Wallis test but it is not very powerful in this context. 
                The right utilization of this test is the checking the randomness of a data sequence.
                </description>
                
		<precondition>
                At least one discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, i.e. discrete attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>
	
	<component class_name="TMLGenCompSDWWRunsTest">
                <name>
                Wald-Wolfowitz Runs Test
                </name>

                <bitmap>
                MLSDRunsTestWaldWolfowitz.bmp
                </bitmap>

		<description>
                Runs Test -- A "2 independent samples" population comparison -- No correction for ties. 
                It may be used as an alternative to Mann-Whitney test but it is not very powerful in this context. 
                The right utilization of this test is the checking the randomness of a data sequence.
                </description>
                
		<precondition>
                At least one binary discrete and one continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more factors, all must be binary discrete attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>	
	
	<component class_name="TMLGenCompSDSignTest">
                <name>
                Sign Test
                </name>

                <bitmap>
                MLSDSignTest.bmp
                </bitmap>

		<description>
                Paired (Matched-Pairs) Sign Test. The sign test can be used to test the hypothesis that there is "no difference" between two continuous distributions TARGET and INPUT. 
                It uses mainly the sign of the difference between paired observations.
                If several attributes are TARGET and INPUT, the component processes each TARGET-INPUT pair.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more measurements, i.e. continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenCompSDWilcoxonSignedRanks">
                <name>
                Wilcoxon Signed Ranks Test
                </name>

                <bitmap>
                MLSDWilconxonSignedRanksTest.bmp
                </bitmap>

		<description>
                Wilcoxon's paired (Matched-Pairs) Signed Ranks Test. 
                This test assumes that there is information in the magnitudes of the differences between paired observations, as well as the signs. It is often more powerful that the sign test. 
                If several attributes are TARGET and INPUT, the component processes each TARGET-INPUT pair.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                One or more measurements, i.e. continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more measurements, i.e. continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
		
	<component class_name="TMLGenCompSDSpearmanCorr">
                <name>
                Spearman's rho
                </name>

                <bitmap>
                MLSDSpearmanCorrelation.bmp
                </bitmap>

		<description>
                The Spearman Rank-Order Correlation Coefficient.
                This component transforms the continuous variables into ranks, computes and tests the correlation between these ranks. It enables to handle monotonic but non-linear correlation between the variables.
                If the standard parameter is used, the component computes the correlation for each pair of TARGET-INPUT attributes. If the CROSS-INPUT parameter is checked, the component computes the correlation for each pair of INPUT attributes.
                </description>
                                
		<precondition>
                The TARGET and/or INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                None or several continuous variables, according to the parameters of the component.
                </target-attributes>
                
		<input-attributes>
                One or more continuous variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                

	</component>		
	
	<component class_name="TMLGenCompSDKendallCorr">
                <name>
                Kendall's tau
                </name>

                <bitmap>
                MLSDKendallCorrelation.bmp
                </bitmap>

		<description>
                The Kendall Rank-Order Correlation Coefficient.
                Kendall's rank correlation provides a distribution free test of independence and a measure of the strength of dependence between two variables. 
                If the standard parameter is used, the component computes the correlation for each pair of TARGET-INPUT attributes. If the CROSS-INPUT parameter is checked, the component computes the correlation for each pair of INPUT attributes.
                </description>
                
		<precondition>
                The TARGET and/or INPUT attributes must be specified.
                </precondition>

		<target-attributes>
                None or several continuous variables, according to the parameters of the component.
                </target-attributes>
                
		<input-attributes>
                One or more continuous variables.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                
                
	</component>		
	
	<component class_name="TMLGenSDKRelatedFriedman">
                <name>
                Friedman's ANOVA by Ranks
                </name>

                <bitmap>
                MLSDFriedman2Anova.bmp
                </bitmap>

		<description>
                Friedman's two-way analysis of variance by ranks -- K matched samples. 
                This method compares several related samples. Similar to the parametric repeated measures ANOVA, it is used to detect differences in treatments across multiple test attempts (one test is one input variable).
                </description>
                
		<precondition>
                Two or more continuous attributes in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>		
	
	<component class_name="TMLGenSDKRelatedQCochran">
                <name>
                Cochran's Q-test
                </name>

                <bitmap>
                MLSDCochranQTest.bmp
                </bitmap>

		<description>
                Cochran's Q test for proportions homogeneity -- K related/matched samples. 
                This method compares several related samples. Similar to the Friedman's ANOVA, it is used to detect differences in responses across multiple test attempts (one test is one input variable). 
                But the variables must be binary 0/1, they correspond to the absence or presence of a characteristic on individuals. Caution: the software does not check the values.
                </description>
                
		<precondition>
                Two or more continuous attributes in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous (but binary) attributes. Authorized values are 0 and 1.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGenSDKRelatedAnova">
                <name>
                ANOVA Randomized Blocks
                </name>

                <bitmap>
                MLSDAnovaRandomizedBlocks.bmp
                </bitmap>

		<description>
                Analysis of variance for Randomized Complete Block Design. 
                This method compares several related samples. Each row of the dataset is a block; each column (input variable) is a treatment. 
                It can be view also as a Repeated Measures ANOVA. It is used to detect differences in treatments across multiple test attempts (one test is one input variable).
                </description>
                
		<precondition>
                Two or more continuous attributes in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGenSDKRelatedWKendall">
                <name>
                Kendall's Concordance W
                </name>

                <bitmap>
                MLSDKendallW.bmp
                </bitmap>

		<description>
                The Kendall Coefficient of concordance W -- k sets of Ranking. 
                It is can be seen like a generalization to several variables (K > 2) of the Kendall's tau correlation coefficient. It is also a non-parametric test.
                Set continuous attributes as INPUT. Be careful, we use the following organization of the dataset -- Judges = rows, Objects = columns.
                </description>
                
		<precondition>
                Two or more continuous attributes in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                                

	</component>			

	<component class_name="TMLGenCompFactPCA">
                <name>
                Principal Component Analysis
                </name>

                <bitmap>
                MLFactorialPCA.bmp
                </bitmap>

		<description>
                Principal components analysis, or Karhunen-Loeve transformation.
                Principal component analysis is a technique which enables to visualize a dataset in a lower dimension without loss of infirmation i.e. preserving the proximity between the examples. It can be seen like a dimensionality reduction technique. 
                Basically, the PCA computes new attributes (says factors or axis) which are linear transformations of the input attributes. The variance on these factors is maximized, each axis is orthogonal to the others. 
                The users can specify the number of wished factors. The maximum number of factors is equal to the number of input attributes.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                The factors (continuous attributes) which are asked by the users. They can be used in the subsequent components, e.g. like a input attributes of a clustering or a supervised learning algorithm.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenCompFactPFA">
                <name>
                Principal Factor Analysis
                </name>

                <bitmap>
                MLFactorialPFA.bmp
                </bitmap>

		<description>
                Non iterative principal factor analysis (PFA). This is an approach which tries to detect underlying structures in the relationships between the variables of interest. Unlike PCA, the PFA is focused only on the shared variances of the set of variables. It is suited when the goal is to uncover the latent structure of the variables. It works on a slightly modified version of the correlation matrix where the diagonal, the prior communality estimate of each variable, is replaced by its squared multiple correlation with all others. 
                The users can specify the number of wished factors. The maximum number of factors is equal to the number of positive eigenvalues.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                The factors (continuous attributes) which are asked by the users. They can be used in the subsequent components, e.g. like a input attributes of a clustering or a supervised learning algorithm.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGenCompHarrisCA">
                <name>
                Harris Component Analysis
                </name>

                <bitmap>
                MLFactorialHarrisCA.bmp
                </bitmap>

		<description>
                Harris Component analysis. This is a non-iterative factor analysis approach. It tries to detect underlying structures in the relationships between the variable of interest. Like Principal Factor Analysis, it focuses on the shared variances of the set of variables. It works on a modified version of the correlation matrix. This approach is named also Image Factor Analysis (Kaiser, 1963) in some tools. The users can specify the number of wished factors. The maximum number of factors is equal to the number of positive eigenvalues.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                The factors (continuous attributes) which are asked by the users. They can be used in the subsequent components, e.g. like a input attributes of a clustering or a supervised learning algorithm.
                </postcondition>                                

	</component>	
	
	
	<component class_name="TMLGenCompFactAFDM">
                <name>
                AFDM
                </name>

                <bitmap>
                MLFactorialAFDM.bmp
                </bitmap>

		<description>
                Factor Analysis for Mixed Data. This is a variant of Principal Component Analysis which can be applied on both qualitative (categorical) and quantitative (interval) variables. Based on Pages' paper (2004).
                The users can specify the number of wished factors.
                </description>
                
		<precondition>
                Two or more attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more attributes.
                </input-attributes>
                
		<postcondition>
                The factor scores (continuous attributes). They can be used in the subsequent components, e.g. like a input attributes of a clustering or a supervised learning algorithm.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGenCompFactRotation">
                <name>
                Factor rotation
                </name>

                <bitmap>
                MLFactorialFactorRotation.bmp
                </bitmap>

		<description>
                Rotate factors of PCA using VARIMAX etc. algorithms. 
                The aim is to improve the interpretation of the factors. We want that the correlations between the input attributes and the factors would be more evident. So we can say, these attributes are relevant for this factor, etc. 
                The factor rotation can handle only a subspace of the whole factors. In the most of case, we operate only on the two first factors. But we can modify this parameter.
                </description>
                
		<precondition>
                Can be plugged on PCA components.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                The new projections on the rotated factors. One continuous attribute for each factor.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenCompFactPA">
                <name>
                Parallel Analysis
                </name>

                <bitmap>
                MLFactorialParallel.bmp
                </bitmap>

		<description>
                Perform the Parallel Analysis for the determination of the significant eignevalues of Factor Analysis (Horn, 1965).
                Instead of to generate random variables, the component uses many reshuffled versions (by randomization of the values within variables) of the original dataset.
                </description>
                
		<precondition>
                Can be plugged on Factor Analysis components (PCA and MCA).
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenCompFactBootstrap">
                <name>
                Bootstrap Eigenvalues
                </name>

                <bitmap>
                MLFactorialBootstrap.bmp
                </bitmap>

		<description>
                Bootstrap confidence intervals for eigenvalues. This component computes the confidence intervals of eigenvalues using the bootstrap resampling approach. It can be used for the detection of the significant factors in a factor analysis.  
                </description>
                
		<precondition>
                Can be plugged on Factor Analysis components (PCA and MCA).
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>
	
	
	<component class_name="TMLGenCompFactNIPALS">
                <name>
                NIPALS
                </name>

                <bitmap>
                MLFactorialNIPALS.bmp
                </bitmap>

		<description>
                Wold's NIPALS algorithm (Nonlinear Iterative Partial Least Squares, 1966). 
                It is an alternative to the PCA and gives similar results. It is especially useful when we have a large number of input attributes. Indeed, it doesn't compute and diagonalize explicitly the covariance matrix.
                The user can specify the number of wished factors. Unlike the PCA, the NIPALS algorithm is an iterative approach which stops as soon as the asked factors are computed. The computation time relies heavily on this parameter.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                The factors (continuous attributes) which are asked by the users. They can be used in the subsequent components, e.g. like a input attributes of a clustering or a supervised learning algorithm. The can be very useful in certain situations because they are orthogonal.
                </postcondition>                                

	</component>
		
	<component class_name="TMLGenCompFactMCA">
                <name>
                Multiple Correspondence Analysis
                </name>

                <bitmap>
                MLFactorialMCA.bmp
                </bitmap>

		<description>
                Multiple correspondence analysis. It is an alternative to PCA when the input attributes are discrete. If we have binary inputs, PCA and MCA give similar results. 
                The method computes also factors. The number of wished factors is a parameter of the component.
                </description>
                
		<precondition>
                Two or more discrete attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                The factors (continuous attributes) which are asked by the users. They can be used in the subsequent components, e.g. like a input attributes of a clustering or a supervised learning algorithm. The can be very useful in certain situations because they are orthogonal.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenCompFactAFC">
                <name>
                Correspondence Analysis
                </name>

                <bitmap>
                MLFactorialCA.bmp
                </bitmap>

		<description>
                Correspondence analysis. Correspondence analysis is a descriptive/exploratory technique designed to analyze simple two-way and multi-way contingency tables.
                The proximities and attractivenesses between categories are displayed in a chart.
                </description>
                
		<precondition>
                One discrete attributes and two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                Discrete attribute.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGenCompFactDiscAnalysis">
                <name>
                Canonical Discriminant Analysis
                </name>

                <bitmap>
                MLFactorialDiscriminantAnalysis.bmp
                </bitmap>

		<description>
                Linear Discriminant Analysis produces latent variables from discriminant functions. 
                The factors (latent variables) are linear combination of the input attributes which enable to separate two or more classes (the values of the discrete target attribute). 
                This component is especially intended to feature reduction i.e. the computation of the factors. But the same principle can be used in a classification framework (see. Spv Learning components).
                </description>
                
		<precondition>
                One discrete attribute (TARGET) and at least one continuous attribute (INPUT) must be available in the dataset.
                </precondition>

		<target-attributes>
                One discrete attribute.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                The factors (continuous attributes). The number of factors is equal to the number of the values of the target attribute minus 1.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenCompFactDiscCorrespAnalysis">
                <name>
                Discriminant Correspondence Analysis
                </name>

                <bitmap>
                MLFactDiscCorrespAnalysis.bmp
                </bitmap>

		<description>
                Canonical discriminant analysis for discrete descriptors. This component performs a canonical discriminant analysis where we want to characterize the groups of individuals (described by a discrete target attribute) from a set of discrete descriptors. The approach is based on a correspondence analysis on an overall crosstab which is a concatenation of individual crosstabs between the target attribute with each predictive attribute (Abdi, 2007). We obtain factor scores both for values of the target attribute and the input ones which enable to explain the relationship between the variables. We obtain also a factor score coefficients which enable to calculate the coordinates of new individuals from their indicator vector description.
                </description>
                
		<precondition>
                Two or more discrete attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                One discrete attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                The factors (continuous attributes). In most cases, the number of factors is equal to the number of the values of the target attribute minus 1.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGCompNaiveBayes">
                <name>
                Naive bayes
                </name>

                <bitmap>
                MLSpvNaiveBayes.bmp
                </bitmap>

		<description>
                Supervised naive bayes classifier.
                </description>
                
		<precondition>
                At least two discrete attributes must be available in the dataset. 
                This component handles discrete input only.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGCompNaiveBayesContinuous">
                <name>
                Naive bayes continuous
                </name>

                <bitmap>
                MLSpvNaiveBayesContinuous.bmp
                </bitmap>

		<description>
                Supervised naive bayes classifier for continuous predictors. Gaussian assumption. According to the homoscedasticity assumption, we can get a linear (true) or a quadratic (false) model.
                </description>
                
		<precondition>
                At least one discrete attributes and one continuous must be available in the dataset. 
                This component handles continuous input only.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>
		
	<component class_name="TMLGCompSpvCN2">
                <name>
                Decision List
                </name>

                <bitmap>
                MLSpvCN2.bmp
                </bitmap>

		<description>
                Decision List induction (Suggested by Clark's CN2, 1989). The obtained classifier is an ordered set of rules. The algorithm can handle a multi-class problem.
                </description>
                
		<precondition>
                At least two discrete attributes must be available in the dataset. 
                This component handles discrete input only.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                
                
	</component>	
	
	<component class_name="TMLGCompSpvRuleInduction">
                <name>
                Rule Induction
                </name>

                <bitmap>
                MLSpvRuleInduction.bmp
                </bitmap>

		<description>
                Inductive rule learning algorithm, based on the "separate-and-conquer" principle. The obtained classifier is an unordered set of rules. The algorithm can handle a multi-class problem.
                </description>
                
		<precondition>
                At least two discrete attributes must be available in the dataset. 
                This component handles discrete input only.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                
                
	</component>	
		
	<component class_name="TMLGCompOneInstance">
                <name>
                Supervised Learning
                </name>

                <bitmap>
                MLMetaSpvOneInstance.bmp
                </bitmap>

		<description>
                Single supervised learning.
                This component instantiates a supervised learning algorithm. The insertion of this component in a diagram may be realized in two ways : (1) automatically appended to the diagram when we insert a supervised learning component; or (2) adding the component and embed in it the supervised learning algorithm.
                </description>
                
		<precondition>
                Attributes' specification for the supervised learning framework.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                According to the embedded supervised learning algorithm.
                </input-attributes>
                
		<postcondition>
                Predicted class value -- A new discrete attribute is added to the dataset.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGCompCSOneInstance">
                <name>
                Cost Sensitive Learning
                </name>

                <bitmap>
                MLMetaSpvCostSensitive.bmp
                </bitmap>

		<description>
                Single cost sensitive supervised learning.
                This component instantiates a supervised learning algorithm. The insertion of this component into a diagram must be realized in two steps: adding the component and embed in it the supervised learning algorithm.
                The main parameter of this component the Cost Matrix. See "Parameters..." menu.
                </description>
                
		<precondition>
                Attributes' specification for the supervised learning framework.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                According to the embedded supervised learning algorithm.
                </input-attributes>
                
		<postcondition>
                Predicted class value -- A new discrete attribute is added to the dataset.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGCompCSBagging">
                <name>
                Cost Sensitive Bagging
                </name>

                <bitmap>
                MLMetaSpvCSBagging.bmp
                </bitmap>

		<description>
                Bagging Cost Sensitive Supervised Learning.
                Bagging : examples resampling and simple classifier voting (Breiman, 1996).
                "Bootstrap aggregating" is a meta-supervised algorithm. It is a special case of model averaging. 
                This component apply the voting scheme on a cost-sensitive supervised learning algorithm.
                The main parameter of this component are the Cost Matrix and the number of replication. See "Parameters..." menu.
                </description>
                
		<precondition>
                Attributes' specification for the supervised learning framework.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                According to the embedded supervised learning algorithm.
                </input-attributes>
                
		<postcondition>
                Predicted class value -- A new discrete attribute is added to the dataset.
                </postcondition>                                

	</component>		
	
	<component class_name="TMLGCompCSMultiCost">
                <name>
                MultiCost
                </name>

                <bitmap>
                MLMetaSpvMultiCost.bmp
                </bitmap>

		<description>
                Sensitive Supervised Learning. This method is very similar to the MetaCost framework (Domingos, 1999). 
                This component uses bagging for the estimation of the posterior probability. The particularity is that the misclassification cost is applied on each individual classifier. A predicted attribute is created with the bagging phase. Then it is used as a class attribute in the construction of the final classifier. 
                Compared to the Bagging Cost Sensitive approach, we have an unique classifier here, that we can eventually interpret.
                The main parametere of this component are the Cost Matrix and the number of replication. See "Parameters..." menu.
                </description>
                
		<precondition>
                Attributes' specification for the supervised learning framework.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                According to the embedded supervised learning algorithm.
                </input-attributes>
                
		<postcondition>
                Predicted class value -- A new discrete attribute is added to the dataset.
                </postcondition>                                

	</component>		
		
	<component class_name="TMLGCompBagging">
                <name>
                Bagging
                </name>

                <bitmap>
                MLMetaSpvBagging.bmp
                </bitmap>

		<description>
                Bagging : examples resampling and simple classifier voting (Breiman, 1996).
                "Bootstrap aggregating" is a meta-supervised algorithm. It is a special case of model averaging. 
                The aim is to improve the accuracy of the learning algorithm by combining (voting) of several instances of the classifiers built on a bootstrap samples.
                </description>
                
		<precondition>
                Attributes' specification for the supervised learning framework.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                According to the embedded supervised learning algorithm.
                </input-attributes>
                
		<postcondition>
                Predicted class value -- A new discrete attribute is added to the dataset.
                </postcondition>                                
                
	</component>
	
	<component class_name="TMLGCompArcing">
                <name>
                Arcing [Arc-x4]
                </name>

                <bitmap>
                MLMetaSpvArcing.bmp
                </bitmap>

		<description>
                Arcing : weighed examples resampling and simple classifier voting (Breiman, 1998). 
                It is a Breiman's variant of bagging where we used a weighed scheme when we design the bootstrap samples.
                </description>
                
		<precondition>
                Attributes' specification for the supervised learning framework.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                According to the embedded supervised learning algorithm.
                </input-attributes>
                
		<postcondition>
                Predicted class value -- A new discrete attribute is added to the dataset.
                </postcondition>                                
                
	</component>
	
	<component class_name="TMLGCompBoosting">
                <name>
                Boosting
                </name>

                <bitmap>
                MLMetaSpvBoosting.bmp
                </bitmap>

		<description>
                Boosting : weighed examples resampling and weighed classifier voting (Adaboost.M1 -- Freund and Schapire, 1996).
                </description>
                
		<precondition>
                Attributes' specification for the supervised learning framework.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                According to the embedded supervised learning algorithm.
                </input-attributes>
                
		<postcondition>
                Predicted class value -- A new discrete attribute is added to the dataset.
                </postcondition>                                

	</component>
	
	<!--
	<component class_name="TMLGCompAggregating">
                <name>
                Aggregating
                </name>

                <bitmap>
                MLMetaSpvAggregating.bmp
                </bitmap>

		<description>
                Aggregating : generic component for aggregation of classifiers (under development, do not use...)
                </description>
                
		<precondition>
                None.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	-->
	
	<component class_name="TMLGenVarClusKMeans">
                <name>
                VARKMeans
                </name>

                <bitmap>
                MLVarClusKMeans.bmp
                </bitmap>

		<description>
                Clustering variables using K-Means approach on latent variable. Continuous input attributes.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                A set of continuous attributes which represent clusters are available.
                </postcondition>                               

	</component>	
	
	<component class_name="TMLGenVarClusHCA">
                <name>
                VARHCA
                </name>

                <bitmap>
                MLVarClusHCA.bmp
                </bitmap>

		<description>
                Clustering variables using HCA -- Hierarchical Cluster Analysis -- approach on latent variable, continuous input attributes.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                A set of continuous attributes which represent clusters are available.
                </postcondition>                               

	</component>	
	
	<component class_name="TGenCatVarClusHAC">
                <name>
                CatVARHCA
                </name>

                <bitmap>
                MLCatVarClusHCA.bmp
                </bitmap>

		<description>
                Clustering for levels of categorical variables using a hierarchical agglomerative clustering algorithm. Categorical input attributes. Illustrative (supplementary) categorical variables may be used.
                </description>
                
		<precondition>
                Two or more categorical attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more categorical attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                               

	</component>	
		
	<component class_name="TMLGenVarClusTD">
                <name>
                VARCLUS
                </name>

                <bitmap>
                MLVarClusTopDown.bmp
                </bitmap>

		<description>
                Clustering variables using VARCLUS -- Top Down approach. Based on latent variables. Continuous input attributes.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                A set of continuous attributes which represent clusters are available.
                </postcondition>                               

	</component>	
				
	<component class_name="TGenClusKMeans">
                <name>
                K-Means
                </name>

                <bitmap>
                MLClusteringKMeans.bmp
                </bitmap>

		<description>
                Clustering with K-Means method (Forgy or McQueen), continuous input attributes.
                </description>
                
		<precondition>
                One or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new discrete attribute is added to the dataset. Each value of this attribute corresponds to a cluster.
                </postcondition>                               

	</component>
	
	<component class_name="TGenClusKMeansStrengthen">
                <name>
                K-Means Strengthening
                </name>

                <bitmap>
                MLClusteringKMeansStrengthen.bmp
                </bitmap>

		<description>
                Reinforcement of existing partition - defined by the target attribute - with the K-Means algorithm (Forgy or McQueen). Continuous input attributes.
                </description>
                
		<precondition>
                One or more continuous attributes and one discrete attribute must be available in the dataset.
                </precondition>

		<target-attributes>
                A discrete variable which specifies the original clusters.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new discrete attribute is added to the dataset. Each value of this attribute corresponds to a cluster.
                </postcondition>                               

	</component>	
	
	<component class_name="TGenClusEM">
                <name>
                EM-Clustering
                </name>

                <bitmap>
                MLClusteringEM.bmp
                </bitmap>

		<description>
                Clustering with Expectation-Maximization clustering algorithm. Gaussian mixture. Continuous inputs.
                </description>
                
		<precondition>
                One or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new discrete attribute is added to the dataset. Each value of this attribute corresponds to a cluster.
                </postcondition>                                

	</component>
	
	<component class_name="TGenClusEMSelection">
                <name>
                EM-Selection
                </name>

                <bitmap>
                MLClusteringEMSelection.bmp
                </bitmap>

		<description>
                Selection of the "best" number of clusters for EM-Clustering. Can be plugged on this kind of component only.
                </description>
                
		<precondition>
                It can be pugged on the EM-Clustering component only.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	
	<component class_name="TGenClusSOM">
                <name>
                Kohonen-SOM
                </name>

                <bitmap>
                MLClusteringSOM.bmp
                </bitmap>

		<description>
                Clustering with Kohonen's self organization map, continuous input attributes.
                </description>
                
		<precondition>
                One or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new discrete attribute is added to the dataset. Each value of this attribute corresponds to a cluster.
                </postcondition>                                
                
	</component>

	<component class_name="TGenClusLVQ">
                <name>
                LVQ
                </name>

                <bitmap>
                MLClusteringLVQ.bmp
                </bitmap>

		<description>
                Supervised clustering with Kohonen's learning vector quantizer (LVQ1), discrete target attribute and continuous input attributes.
                </description>
                
		<precondition>
                One or more continuous attributes must be available in the dataset.
                At least one discrete attribute must be available.
                </precondition>

		<target-attributes>
                One discrete attribute.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new discrete attribute is added to the dataset. Each value of this attribute corresponds to a cluster.
                </postcondition>                                

	</component>
	
	<component class_name="TGenClusNG">
                <name>
                Neighborhood Graph
                </name>

                <bitmap>
                MLClusteringNG.bmp
                </bitmap>

		<description>
                Supervised clustering with neighborhood graph (Muhlenbach, 2005). 
                It is an experimental method under development.
                </description>
                
		<precondition>
                One discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                One discrete attribute.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new discrete attribute is added to the dataset. Each value of this attribute corresponds to a cluster.
                </postcondition>                                

	</component>	

	<component class_name="TGenClusHAC">
                <name>
                HAC
                </name>

                <bitmap>
                MLClusteringHAC.bmp
                </bitmap>

		<description>
                Hierarchical Clustering.
                This component uses the standard hierarchical agglomerative clustering strategy (Ward's criterion). The leaves of the tree correspond to the examples of the dataset. 
                If there are a large number of examples, the computation time may be prohibitive. We can improve the computation time in defining the starting leaves of the tree from the values provided by a discrete attribute. This discrete attribute can arise from a rough clustering process (such as K-Means with a medium number of clusters, e.g. 50) or supplied by the users from a domain knowledge consideration. 
                This multi-level approach is known as a "hybrid" approach.
                </description>
                
		<precondition>
                One or more continuous attributes must be available in the dataset. 
                If we want define the leaves of the tree (the starting clusters), a discrete attribute must be available.
                </precondition>

		<target-attributes>
                None or possibly one discrete approach in the multi-level approach.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes
                </input-attributes>
                
		<postcondition>
                A new discrete attribute is added to the dataset. Each value of this attribute corresponds to a cluster.
                </postcondition>                                

	</component>
	
	<component class_name="TGenClusTree">
                <name>
                CT
                </name>

                <bitmap>
                MLClusteringTree.bmp
                </bitmap>

		<description>
                Clustering Tree.
                Monothetic clustering tree. It is very similar to regression tree but can handle more than one continuous class attribute. The main references are Chavent (1998) and Blockeel (1988).
                It may be used in a clustering analysis framework (clustering tree) or in a multi-responses regression framework (predictive clustering tree).
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                One or more continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more continuous/discrete attributes.
                </input-attributes>
                
		<postcondition>
                A new discrete attribute is added to the dataset. Each value of this attribute (one leaf of the tree) corresponds to a cluster.
                </postcondition>                                

	</component>	
	
	<component class_name="TGenClusTreeCART">
                <name>
                CTP
                </name>

                <bitmap>
                MLClusteringTreeCART.bmp
                </bitmap>

		<description>
                Clustering Tree with post-pruning processing for right size of tree determination. 
                This component is similar to Clustering Tree. A post pruning using a prunnig set (a part of the selected examples) is performed in order to get the right size of the tree.
                </description>
                
		<precondition>
                Two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                One or more continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more continuous/discrete attributes.
                </input-attributes>
                
		<postcondition>
                A new discrete attribute is added to the dataset. Each value of this attribute (one leaf of the tree) corresponds to a cluster.
                </postcondition>                                

	</component>		

	<component class_name="TMLGenCompSpvAssesTestSet">
                <name>
                Test
                </name>

                <bitmap>
                MLSpvAssesTestSet.bmp
                </bitmap>

		<description>
                Evaluate supervised learning algorithm(s) on a predefined test set. 
                The dataset must be partitioned into train and test set using a examples selection component (see Instance Selection palette). The classifier must be learned from the selected examples. The test error rate will be computed on the unselected examples. 
                We can use this component in order to compare the accuracy of several learning algorithms on the same examples partitioning of the dataset.
                </description>
                
		<precondition>
                The dataset must be partitioned into train and test set.
                </precondition>

		<target-attributes>
                The observed class attribute (discrete).
                </target-attributes>
                
		<input-attributes>
                One or more predicted class attributes (discrete).
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	

	<component class_name="TMLGenCompAssesTrainTest">
                <name>
                Train-test
                </name>

                <bitmap>
                MLSpvAssesTrainTest.bmp
                </bitmap>

		<description>
                Supervised learning assesment with subdivision of the dataset into learning-set and test-set. 
                This component performs a repetition of the train-test process in order to evaluate the prediction error rate.
                </description>
                
		<precondition>
                It must be plugged on a supervised (or meta-supervised) learning algorithm.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                              

	</component>
	
	<component class_name="TMLGenCompAssesCV">
                <name>
                Cross-validation
                </name>

                <bitmap>
                MLSpvAssesCrossValidation.bmp
                </bitmap>

		<description>
                Supervised learning assesment with multiple cross-validation. 
                This component performs a repetition of a standard cross-validation and computes the overall average of the prediction error rate.
                </description>
                
		<precondition>
                It must be plugged on a supervised (or meta-supervised) learning algorithm.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                              

	</component>
	
	<component class_name="TMLGenCompAssesLVO">
                <name>
                Leave-One-Out
                </name>

                <bitmap>
                MLSpvAssesLeaveOneOut.bmp
                </bitmap>

		<description>
                Supervised learning assesment with leave-one-out. 
                This component performs a leave-one-out error rate evaluation for supervised learning algorithm.
                </description>
                
		<precondition>
                It must be plugged on a supervised (or meta-supervised) learning algorithm.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                              

	</component>	
	
	<component class_name="TMLGenCompAssesBVar">
                <name>
                Bias-variance decomposition
                </name>

                <bitmap>
                MLSpvAssesBVDecomposition.bmp
                </bitmap>

		<description>
                Wolpert and Kohavi bias-variance decomposition. 
                This component computes an estimation of the error rate and provides the decomposition of this error rate into bias (systematic error, inability to handle the "true" concept) and variance (imputable to the treatment of the learning dataset).
                </description>
                
		<precondition>
                It must be plugged on a supervised (or meta-supervised) learning algorithm.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                                             

	</component>	
	
	<component class_name="TMLGenCompAssesBootstrap">
                <name>
                Bootstrap
                </name>

                <bitmap>
                MLSpvAssesBootstrap.bmp
                </bitmap>

		<description>
                Supervised learning assesment with 0.632 and 0.632+ bootstrap. 
                This component computes the overall confusion matrix and gives an error rate estimation.
                </description>
                
		<precondition>
                It must be plugged on a supervised (or meta-supervised) learning algorithm.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	

	<component class_name="TGenCompAssocAPriori">
                <name>
                A priori
                </name>

                <bitmap>
                MLAssocAPriori.bmp
                </bitmap>

		<description>
                This component computes association rule using a basic algorithm suggested by the AGRAWAL's "A PRIORI" description.
                </description>
                
		<precondition>
                At least two discrete attributes must be available in the dataset. This component can handle also binary 0/1 continuous attributes.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more discrete attributes or two or more binary 0/1 continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>
	
	<component class_name="TGenCompAssocOutlier">
                <name>
                Assoc Outlier
                </name>

                <bitmap>
                MLAssocAPrioriOutlier.bmp
                </bitmap>

		<description>
                This component uses the association rule mining principle in order to detect outliers (experimental version).
                </description>
                
		<precondition>
                At least two discrete attributes must be available in the dataset. This component can handle also binary 0/1 continuous attributes.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more discrete attributes or two or more binary 0/1 continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	
	<component class_name="TGenCompAssocRulePT">
                <name>
                A priori PT
                </name>

                <bitmap>
                MLAssocAPrioriPT.bmp
                </bitmap>

		<description>
                Christian Borgelt's A PRIORI Algorithm (Running External Executable -- apriori.exe).
                This component prepares a temporary file and calls Borgelt's program. The output are processed and showed in Tanagra.  The Borgelt program is one of the most fast program for computing association rules, but the consequent may contain one item only.
                </description>
                
		<precondition>
                At least two discrete attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	
	<component class_name="TGenCompAssocFreqItemsets">
                <name>
                Frequent Itemsets
                </name>

                <bitmap>
                MLAssocFreqItemsets.bmp
                </bitmap>

		<description>
                Christian Borgelt's A PRIORI Algorithm (Running External Executable -- apriori.exe) for the generation of itemsets (frequent, closed, maximal, generators).
                This component prepares a temporary file and calls Borgelt's program. The output are processed and showed in Tanagra.
                </description>
                
		<precondition>
                At least two discrete attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	
	<component class_name="TGenCompAssocAPrioriMR">
                <name>
                A priori MR
                </name>

                <bitmap>
                MLAssocAPrioriMR.bmp
                </bitmap>

		<description>
                This component computes association rule -- MR researches (2004).
                It is an experimental version. We currently evaluates various rule relevance measures.
                </description>
                
		<precondition>
                At least two discrete attributes must be available in the dataset. This component can handle also binary 0/1 continuous attributes.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                Two or more discrete attributes or two or more binary 0/1 continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>
	
	<component class_name="TGenCompAssocRuleSpv">
                <name>
                Spv Assoc Rule
                </name>

                <bitmap>
                MLAssocAPrioriSpv.bmp
                </bitmap>

		<description>
                Supervised association rule generator (e.g for multivariate group characterization). 
                This component computes all rules leading to the discrete target attribute using the A PRIORI approach.
                </description>
                
		<precondition>
                At least two discrete attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                One discrete attribute.
                </target-attributes>
                
		<input-attributes>
                Two or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>
	
	<component class_name="TGenCompAssocTreeSpv">
                <name>
                Spv Assoc Tree
                </name>

                <bitmap>
                MLAssocTreeSpv.bmp
                </bitmap>

		<description>
                Supervised association generator (e.g for multivariate group characterization).
                This component computes all rules leading to the discrete target attribute using the A PRIORI approach. 
                This component is more efficient than the "Spv Assoc Rule" component.
                </description>
                
		<precondition>
                At least two discrete attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                One discrete attribute.
                </target-attributes>
                
		<input-attributes>
                Two or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                
                
	</component>
	
	<component class_name="TMLGenCompMultipleScatter">
                <name>
                View multiple scatterplot
                </name>

                <bitmap>
                MLViewMultipleScatter.bmp
                </bitmap>

		<description>
                View values of discrete attributes (input) on a scatterplot (2 targets attributes). 
                This component is used for the conditional averages visualization of a pair of continuous attributes according to the values of a set of discrete attributes.                 
                </description>
                
		<precondition>
                One discrete attribute and two or more continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                Two continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>

	<component class_name="TMLGenCompCorrelationScatter">
                <name>
                Correlation scatterplot
                </name>

                <bitmap>
                MLViewCorrelationScatter.bmp
                </bitmap>

		<description>
                View correlation of continuous attributes (input) on a scatterplot (2 targets attributes). 
                This component can be used for the visualization of correlation plot of a PCA. 
                But, it can be useful in the visualization of the correlation of a set of attributes with a pair of variables.
                </description>
                
		<precondition>
                At least three continuous attributes must be available in the dataset.
                </precondition>

		<target-attributes>
                Two continuous attributes, e.g. the first two factors of a PCA.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGCompLDiscAnalysis">
                <name>
                Linear discriminant analysis
                </name>

                <bitmap>
                MLSpvLinearDiscriminantAnalysis.bmp
                </bitmap>

		<description>
                Supervised linear discriminant analysis, all inputs are continuous, check colinearity !!!
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>

	<component class_name="TMLGCompSpvSVM">
                <name>
                SVM
                </name>

                <bitmap>
                MLSpvSVM.bmp
                </bitmap>

		<description>
                Implements John C. Platt's sequential minimal optimization algorithm for training a support vector classifier using polynomial or RBF kernels (WEKA implementation)
                </description>    
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Binary discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGCompSpvCPLS">
                <name>
                C-PLS
                </name>

                <bitmap>
                MLSpvCPLS.bmp
                </bitmap>

		<description>
                PLS for Classification (Binary TARGET, continuous or binary INPUT)
                </description>   
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Binary discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGCompSpvPLSDA">
                <name>
                PLS-DA
                </name>

                <bitmap>
                MLSpvPLSDA.bmp
                </bitmap>

		<description>
                PLS for Discrimination (Categorical TARGET, continuous or binary INPUT)
                </description>   
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous or binary attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGCompSpvPLSLDA">
                <name>
                PLS-LDA
                </name>

                <bitmap>
                MLSpvPLSLDA.bmp
                </bitmap>

		<description>
                Combination of PLS and Linear Discriminant Analysis (Categorical TARGET, continuous or binary INPUT)
                </description>   
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous or binary attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>		
		
	<component class_name="TMLGCompSpvCSVC">
                <name>
                C-SVC
                </name>

                <bitmap>
                MLSpvLibsvmCSVC.bmp
                </bitmap>

		<description>
                C-SVC from LIBSVM library -- SVM for classification -- Discrete Multi-class target, Continuous input
                </description>   
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGCompSpvCVM">
                <name>
                CVM
                </name>

                <bitmap>
                MLSpvLibcvmCVM.bmp
                </bitmap>

		<description>
                CVM (Core Vector Machine) from LIBCVM library -- Fast Support Vector Machine training on very large data sets (Tsang and al., 2005) -- Discrete multi-class target, continuous input
                </description>   
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGCompSpvBVM">
                <name>
                BVM
                </name>

                <bitmap>
                MLSpvLibcvmBVM.bmp
                </bitmap>

		<description>
                BVM (Ball Vector Machine) from LIBCVM library -- Simpler core vector machine with enclosing balls (Tsang and al., 2007) -- Discrete multi-class target, continuous input
                </description>   
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>	
			
	<component class_name="TMLGCompMCLogisticReg">
                <name>
                Multinomial Logistic Regression
                </name>

                <bitmap>
                MLSpvMultinomialLogisticRegression.bmp
                </bitmap>

		<description>
                Multinomial Logistic Regression
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGCompSpvTree">
                <name>
                ID3
                </name>

                <bitmap>
                MLSpvTreeID3.bmp
                </bitmap>

		<description>
                Derivated from Quinlan's ID3 (1979), some parameters added, any input attributes.
                </description>
                
		<precondition>
                At least one discrete attribute (TARGET) and one or more discrete/continuous attributes (INPUT) must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete/continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                                               

	</component>
	
	<component class_name="TMLGCompSpvRndTree">
                <name>
                Rnd Tree
                </name>

                <bitmap>
                MLSpvTreeRandom.bmp
                </bitmap>

		<description>
                Random Tree. Use with Bagging (Meta Spv) for Random Forest (Breiman, 2001).
                Using solely this learning algorithm, outside the aggregating framework (e.g. bagging), is not very efficient.
                </description>
                
		<precondition>
                At least one discrete attribute (TARGET) and one or more discrete/continuous attributes (INPUT) must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete/continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGCompSpvTreeCART">
                <name>
                C-RT
                </name>

                <bitmap>
                MLSpvTreeCART.bmp
                </bitmap>

		<description>
                Breiman et al. (1984), classification tree algorithm.
                </description>
                
		<precondition>
                At least one discrete attribute (TARGET) and one or more discrete/continuous attributes (INPUT) must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete/continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                                

	</component>	
	
	<component class_name="TMLGCompSpvCSTreeCART">
                <name>
                CS-CRT
                </name>

                <bitmap>
                MLSpvCSTreeCART.bmp
                </bitmap>

		<description>
                Breiman et al. (1984), cost sensitive classification tree algorithm. This version of CART handles misclassification cost matrix.
                </description>
                
		<precondition>
                At least one discrete attribute (TARGET) and one or more discrete/continuous attributes (INPUT) must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete/continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                                

	</component>		
	
	<component class_name="TMLGCompSpvCSTreeC45">
                <name>
                CS-MC4
                </name>

                <bitmap>
                MLSpvCSTreeMC4.bmp
                </bitmap>

		<description>
                Cost sensitive decision tree algorithm. This version uses m-estimate smoothed probability estimation (a generalization of Laplace estimate). It minimizes the expected loss using misclassification cost matrix for the detection of the best prediction within leaves. See Bradford et al., Pruning Decision Trees with misclassification costs, ECML-98. Described into Chauchat and Rakotomalala, PKDD-2001.
                </description>
                
		<precondition>
                At least one discrete attribute (TARGET) and one or more discrete/continuous attributes (INPUT) must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete/continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                                

	</component>			
	
	<component class_name="TMLGCompSpvTreeC45">
                <name>
                C4.5
                </name>

                <bitmap>
                MLSpvTreeC45.bmp
                </bitmap>

		<description>
                Quinlan (1993), decision tree algorithm.
                </description>
                
		<precondition>
                At least one discrete attribute (TARGET) and one or more discrete/continuous attributes (INPUT) must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete/continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>		

	<component class_name="TMLGCompKNN">
                <name>
                K-NN
                </name>

                <bitmap>
                MLSpvKNN.bmp
                </bitmap>

		<description>
                K-nearest neighbor (instance based learning), any input attributes, use HEOM distance metric.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>

	<component class_name="TMLGCompProtoNN">
                <name>
                Prototype-NN
                </name>

                <bitmap>
                MLSpvPrototypeNN.bmp
                </bitmap>

		<description>
                Prototype-nearest neighbor, continuous input attributes, kernels can be defined by clustering.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>

	<component class_name="TMLGCompLogisticReg">
                <name>
                Binary logistic regression
                </name>

                <bitmap>
                MLSpvLogisticRegression.bmp
                </bitmap>

		<description>
                Binary logistic regression, target must be binary discrete attribute, inputs are continuous.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Binary discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                                

	</component>
	
	<component class_name="TMLGenHosmerLemeshowTest">
                <name>
                Hosmer Lemeshow Test
                </name>

                <bitmap>
                MLSpvHosmerLemeshowTest.bmp
                </bitmap>

		<description>
                Hosmer Lemeshow Test for Binary Logistic Regression
                </description>
                
		<precondition>
                Must be plugged on an instance of binary logistic regression.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                There is no output for this component, we cannot add another component after this one.
                </postcondition>                                                

	</component>	
	
	<component class_name="TMLGenSpvLogRegResiduals">
                <name>
                Logistic Regression Residuals
                </name>

                <bitmap>
                MLSpvLogRegResiduals.bmp
                </bitmap>

		<description>
                Computes the residuals and influence measures for Binary Logistic Regression
                </description>
                
		<precondition>
                Must be plugged on an instance of binary logistic regression.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                Residuals (Pearson and deviance, both unstandardized and standardized) and influence measures (Hat, Cook's D, etc.) are added to the current dataset.
                </postcondition>                                                

	</component>	
		
	<component class_name="TMLGCompSpvTRIRLS">
                <name>
                Log-Reg TRIRLS
                </name>

                <bitmap>
                MLSpvLogisticRegTrirls.bmp
                </bitmap>

		<description>
                Binary logistic regression from LR-TRIRLS Library.
                </description>
                
		<precondition>
                At least one binary discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Binary discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>

	<component class_name="TMLGCompSpvMLP">
                <name>
                Multilayer perceptron
                </name>

                <bitmap>
                MLSpvMLP.bmp
                </bitmap>

		<description>
                MLP Neural network, continuous input attributes.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>

	<!-- "see generalization with RBF feature construction component ?" -->
	<component class_name="TMLGCompSpvRBF">
                <name>
                Radial basis function
                </name>

                <bitmap>
                MLSpvRBF.bmp
                </bitmap>

		<description>
                RBF Neural network, continuous input attributes, off-line learning of kernels, with clustering for examples.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                A new column (discrete attribute) is added, it corresponds to the predicted values of the class attribute.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenFSRemoveConstant">
                <name>
                Remove constant
                </name>

                <bitmap>
                MLFSRemoveConstant.bmp
                </bitmap>

		<description>
                Remove constant attributes from the INPUT selection.
                This component can process together discrete and continuous input attributes.
                </description>
                
		<precondition>
                One or more attributes must be available.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                One or more discrete/continuous attributes.
                </input-attributes>
                
		<postcondition>
                A subset of the INPUT attributes.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenFSUnivChi2">
                <name>
                Feature ranking
                </name>

                <bitmap>
                MLFSUnivariateChi2.bmp
                </bitmap>

		<description>
                Univariate supervised feature ranking using a CHI-2 criterion.               
                This component ranks the inputs attributes according to their relevance. A cutting rule enables to select a subset a these attributes. It is a supervised algorithm, we must define the discrete target attribute.
                This approach does not take into consideration the redundancy of the input attributes.
                </description>
                
		<precondition>
                At least two discrete attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                


	</component>
	
	<component class_name="TMLGenFSRelieff">
                <name>
                ReliefF
                </name>

                <bitmap>
                MLFSRelieff.bmp
                </bitmap>

		<description>
                Supervised feature selection algorithm based on the RELIEFF principle (Kira and Rendell, 1992; Kononenko and al., 1997).
                This approach does not take into consideration the redundancy of the input attributes.
                </description>
                
		<precondition>
                At least two attributes must be available, the target attribute must be discrete.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more discrete and/or continuous attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                


	</component>	
	
	<component class_name="TMLGenFSMifs">
                <name>
                MIFS filtering
                </name>

                <bitmap>
                MLFSMIFS.bmp
                </bitmap>

		<description>
                Battiti's MIFS Feature Filtering.
                It is a supervised feature selection algorithms based upon a filtering approach i.e. processes the selection independently from the learning algorithm. 
                This algorithm, unlike the ranking approaches, takes into consideration the redundancy of the input attributes.                                
                </description>
                
		<precondition>
                Two or more discrete attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Discrete attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                                                

	</component>

	<component class_name="TMLGenFSMerit">
                <name>
                CFS filtering
                </name>

                <bitmap>
                MLFSMerit.bmp
                </bitmap>

		<description>
                Hall and Smith (1997 -- 2000) Correlation based Feature Selection.
                It is a supervised feature selection algorithms based upon a filtering approach i.e. processes the selection independently from the learning algorithm. 
                This algorithm, unlike the ranking approaches, takes into consideration the redundancy of the input attributes.                                
                </description>
                
		<precondition>
                Two or more discrete attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Discrete attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                                                

	</component>
	
	<component class_name="TMLGenFSMODTree">
                <name>
                MODTree filtering
                </name>

                <bitmap>
                MLFSMODTree.bmp
                </bitmap>

		<description>
                Lallich and Rakotomalala (1999 -- 2002) Multivalued Oblivious Decision Tree feature selection. 
                It is a supervised feature selection algorithms based upon a filtering approach i.e. processes the selection independently from the learning algorithm. 
                This algorithm, unlike the ranking approaches, takes into consideration the redundancy of the input attributes.                
                </description>
                
		<precondition>
                Two or more discrete attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Discrete attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                                             

	</component>
	
	<component class_name="TMLGenFSFcbf">
                <name>
                FCBF filtering
                </name>

                <bitmap>
                MLFSFCBF.bmp
                </bitmap>

		<description>
                Fast Correlation-Based Filter (Yu and Liu, 2003). 
                It is a supervised feature selection algorithms based upon a filtering approach i.e. processes the selection independently from the learning algorithm. 
                This algorithm, unlike the ranking approaches, takes into consideration the redundancy of the input attributes.
                </description>
                
		<precondition>
                Two or more discrete attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Discrete attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenFSUnivFisher">
                <name>
                Fisher filtering
                </name>

                <bitmap>
                MLFSUnivariateFisher.bmp
                </bitmap>

		<description>
                Univariate Fisher's ANOVA ranking. It is a supervised feature selection algorithms based upon a filtering approach i.e. processes the selection independently from the learning algorithm.
                This component ranks the inputs attributes according to their relevance. A cutting rule enables to select a subset a these attributes. It is a supervised algorithm, we must define the discrete target attribute.
                This approach does not take into consideration the redundancy of the input attributes.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenFSStepDisc">
                <name>
                Stepdisc
                </name>

                <bitmap>
                MLFSStepDisc.bmp
                </bitmap>

		<description>
                Supervised approach based on the Wilks' partial lambda. Known also as "stepwise discriminant analysis" method.
                Only "forward" and "backward" approaches are implemented here. These are step-by-step methods. 
                The most significant (less significant) attribute is added (removed) a each step of the 
                forward (backward) approach. The process stops when there is no significant (irrelevant) 
                attribute to add (to remove). "Significant" or "irrelevant" refers to criteria which are compared to user predefined value (e.g. significance level).
                N.B. STEPDISC is especially intended for discriminant analysis, but we can use this component for all others supervised learning methods.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                

	</component>	

		<component class_name="TMLGenFSBackwardLogReg">
                <name>
                Backward-logit
                </name>

                <bitmap>
                MLFSLogisticBackward.bmp
                </bitmap>

		<description>
                Backward selection based on logistic regression.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Binary (discrete) class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenFSForwardLogReg">
                <name>
                Forward-logit
                </name>

                <bitmap>
                MLFSLogisticForward.bmp
                </bitmap>

		<description>
                Forward selection based on logistic regression.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Binary (discrete) class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                

	</component>	

	<component class_name="TMLGenFSUnivRuns">
                <name>
                Runs filtering
                </name>

                <bitmap>
                MLFSUnivariateRuns.bmp
                </bitmap>

		<description>
                Univariate attribute ranking from runs test. It is a supervised feature selection algorithms based upon a filtering approach i.e. processes the selection independently from the learning algorithm.
                This component ranks the inputs attributes according to their relevance. A cutting rule enables to select a subset a these attributes. It is a supervised algorithm, we must define the discrete target attribute. 
                This approach does not take into consideration the redundancy of the input attributes.
                </description>
                
		<precondition>
                At least one discrete attribute and one or more continuous attributes must be available.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                Continuous attributes.
                </input-attributes>
                
		<postcondition>
                Target attribute is the same one as before the component, a subset of the input attributes is automatically selected and available for the subsequent components, e.g. for the supervised learning algorithms.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenComputeScore">
                <name>
                Scoring
                </name>

                <bitmap>
                MLSpvScoring.bmp
                </bitmap>

		<description>
                Compute "score" for positive class value from classifier (supervised learning algorithm).
                </description>
                
		<precondition>
		This component can be plugged only on a supervised (meta-supervised e.g. baggin, boosting, etc.) learning algorithm.
                The positive target value must be defined in the parameter dialog box. This is to the value of the class attribute which corresponds to the positive class we want to outline.
                </precondition>

		<target-attributes>
                It is not necessary to explicitly define the target attribute. It corresponds to the discrete attribute which is defined for the supervised (meta-supervised) component upon which the scoring component is plugged.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                A new continuous attribute which corresponds to the predicted posterior probability (says "score" in french) of the positive class value.
                </postcondition>                                

	</component>
	
	<component class_name="TMLGenComputePosterior">
                <name>
                Posterior Prob
                </name>

                <bitmap>
                MLSpvScoringPostProba.bmp
                </bitmap>

		<description>
                Compute posterior probabilities for each class value from classifier (supervised learning algorithm).
                </description>
                
		<precondition>
		This component can be plugged only on a supervised (meta-supervised e.g. baggin, boosting, etc.) learning algorithm.
                </precondition>

		<target-attributes>
                It is not necessary to explicitly define the target attribute. It corresponds to the discrete attribute which is defined for the supervised (meta-supervised) component upon which the scoring component is plugged.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                Several continuous attributes which corresponds to the predicted posterior probability (says "score" in french) for each class value.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGenSpvScoringLIFT">
                <name>
                Lift curve
                </name>

                <bitmap>
                MLSpvScoringLift.bmp
                </bitmap>

		<description>
                Compute lift curve (known also as "Gain Chart").
                It provides the tabular values which can be used for lift curve chart. The lift curve plots the true positive rate (vertical axis) against the percent of selected examples (horizontal axis). It is especially useful for evaluating and comparing classifier efficiency for a marketing campaign.
                </description>
                
		<precondition>
                The positive target value must be defined in the parameter dialog box. This is to the value of the class attribute which corresponds to the positive class we want to outline.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attribute which provide the scoring values. Defining more than one attribute enables to compare several scoring values, e.g. when we want to compare the efficiency of several supervised learning algorithms.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGenSpvScoringROC">
                <name>
                Roc curve
                </name>

                <bitmap>
                MLSpvScoringRoc.bmp
                </bitmap>

		<description>
                Compute roc curve (Receiver Operating Characteristics). 
                It provides the tabular values which can be used for a graphical plot of the sensitivity (true positive rate) against the 1-specificity (false positive rate) for a binary classifier system.
                The main utilization of this component in our context is the comparison of supervised learning algorithms. We can handle multi-classes problem here, but we must define what class value is the positive one.
                </description>
                
		<precondition>
                The positive target value must be defined in the parameter dialog box. This is to the value of the class attribute which corresponds to the positive class we want to outline.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attribute which provide the scoring values. Defining more than one attribute enables to compare several scoring values, e.g. when we want to compare the efficiency of several supervised learning algorithms.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGenSpvScoringPrecRecall">
                <name>
                Precision-Recall curve
                </name>

                <bitmap>
                MLSpvScoringPrecRecall.bmp
                </bitmap>

		<description>
                Compute precision-recall curve. 
                It provides a graphical plot of the recall (true positive rate) against the precision for a binary classifier.
                The main utilization of this component in our context is the comparison of supervised learning algorithms. We can handle multi-classes problem here, but we must define what class value is the positive one.
                </description>
                
		<precondition>
                The positive target value must be defined in the parameter dialog box. This is to the value of the class attribute which corresponds to the positive class we want to outline.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attribute which provide the scoring values. Defining more than one attribute enables to compare several scoring values, e.g. when we want to compare the efficiency of several supervised learning algorithms.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>		
	
	<component class_name="TMLGenSpvScoringRelDiagram">
                <name>
                Reliability Diagram
                </name>

                <bitmap>
                MLSpvScoringReliabilityDiagram.bmp
                </bitmap>

		<description>
                Reliability diagram.
                It provides a graphical evaluation of the probabilistic forecasts (scores). On the horizontal axis, we have the mean of scores in each group; on the vertical axis, we have the observed relative frequencies of the positive class value.
                The main utilization of this component in our context is the evaluation of supervised learning algorithms. We can handle multi-classes problem here, but we must define what class value is the positive one.
                </description>
                
		<precondition>
                The positive target value must be defined in the parameter dialog box. This is to the value of the class attribute which corresponds to the positive class we want to outline.
                </precondition>

		<target-attributes>
                Discrete class attribute.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attribute which provide the scoring values. Defining more than one attribute enables to compare several scoring values, e.g. when we want to compare the efficiency of several supervised learning algorithms.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>	
	
	<component class_name="TMLGenCompPLS">
                <name>
                PLS Regression
                </name>

                <bitmap>
                MLPLS.bmp
                </bitmap>

		<description>
                PLS1 and PLS2 Regression using PLS-NIPALS algorithm. The component provides the regression coefficients.
                This component computes the PLS regression projection using the PLS-NIPALS algorithm. We obtain a new projection attribute for each TARGET attribute.
                The regularization property of the regression can be tuned with the number of factors. If we have only one target attribute and select a number of factors equal to the number of input attributes, we obtain similar results to the linear multiple regression.
                </description>
                
		<precondition>
                Two or more continuous attribute must be available.
                </precondition>

		<target-attributes>
                One or more continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                Projection (new continuous attribute) for each target attribute.
                </postcondition>                                

	</component>		
	
	<component class_name="TMLGenCompPLSFact">
                <name>
                PLS Factorial
                </name>

                <bitmap>
                MLPLSFactorial.bmp
                </bitmap>

		<description>
                PLS1 and PLS2 Regression. 
                This component computes the PLS latent variables using the PLS-NIPALS algorithm. 
                The number of factors is a parameter of the component. It can be automatically detected also with the "PLS Selection" component.
                </description>
                
		<precondition>
                Two or more continuous attribute must be available.
                </precondition>

		<target-attributes>
                One or more continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                Factors (latent continuous variables) which correspond to the projection of the individuals on the new subspace.
                </postcondition>                                

	</component>		
	
	<component class_name="TMLGenCompPLSRegPlus">
                <name>
                PLSR
                </name>

                <bitmap>
                MLPLSRegressionPlus.bmp
                </bitmap>

		<description>
                PLS1 and PLS2 Regression. This is an unified framework for PLS Regression and PLS Factorial components. 
                This component computes the X-scores, Y-scores, Prediction, etc. using the PLS-NIPALS algorithm. Report output is improved.
                The number of factors is a parameter of the component. It can be automatically detected also with the "PLS Selection" component.
                </description>
                
		<precondition>
                Two or more continuous attribute must be available.
                </precondition>

		<target-attributes>
                One or more continuous attributes.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                X-Scores, Y-Scores, Prediction, Residuals according the parameters settings.
                </postcondition>                                

	</component>	

	<component class_name="TGenClusPLSSelection">
                <name>
                PLS Selection
                </name>

                <bitmap>
                MLPLSSelection.bmp
                </bitmap>

		<description>
                Using cross-validation in order to detect the right number of components for PLS1 and PLS2. 
                This component organizes and executes the PLS component upon which it is plugged: subdivision of the dataset for the cross-validation; computation of the quality measurement (e.g. PRESS); selection of the best subset of factors. 
                The search strategy is a hill-climbing approach, the search is stopped as soon as the improvement is not significant (is not larger than a threshold). 
                According to the parameter setting, the PLS component, i.e. the number of factors, can be updated with the results of this component.
                </description>
                
		<precondition>
                Can be plugged on a valid PLS component only (PLS Factorial or PLS Regression). 
                This component cannot be executed if the previous component failed.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>		
	
	<component class_name="TMLGenCompPLSConfInterval">
                <name>
                PLS Conf. Interval
                </name>

                <bitmap>
                MLPLSConfidenceInterval.bmp
                </bitmap>

		<description>
                This component uses bootstrap in order to compute the confidence intervals of the PLS regression coefficients. 
                Lower bound and upper bound are estimated with the percentile method.
                </description>
                
		<precondition>
                Can be plugged on a valid PLS Regression component only. 
                This component cannot be executed if the previous component failed.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                None.
                </input-attributes>
                
		<postcondition>
                None.
                </postcondition>                                

	</component>			
	
	<component class_name="TMLGenCompFCRndProj">
                <name>
                Rnd Proj
                </name>

                <bitmap>
                none.bmp
                </bitmap>

		<description>
                Compute a new attribute from the product of two randomly picked attributes. This component is experimental. Do not use...
                </description>
                
		<precondition>
                None.
                </precondition>

		<target-attributes>
                None.
                </target-attributes>
                
		<input-attributes>
                One or more continuous attributes.
                </input-attributes>
                
		<postcondition>
                One or more continuous attributes are generated, according to the parameter settings.
                </postcondition>                                

	</component>				

</components>
